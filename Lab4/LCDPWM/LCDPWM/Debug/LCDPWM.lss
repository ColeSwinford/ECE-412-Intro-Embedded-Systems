
LCDPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ac  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ed  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ba  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_11>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e9       	ldi	r30, 0x92	; 146
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  da:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <main>:
#include <avr/interrupt.h>
char dir = 1;

int main(void)
{
    DDRB |= 0x02;		//set PB1 as output to drive transistor driver.
  e2:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = 2075;		//Make TOP value so Frequency ~120HZ, see CLK pre-scaler
  e4:	8b e1       	ldi	r24, 0x1B	; 27
  e6:	98 e0       	ldi	r25, 0x08	; 8
  e8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TCNT1 = 0;			//Start the timer count from 0 in accordance with dir = 1.
  f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TCCR1A = 0x82;		//These configuration bits are key, research them...
  f8:	82 e8       	ldi	r24, 0x82	; 130
  fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x1B;		//ditto!
  fe:	8b e1       	ldi	r24, 0x1B	; 27
 100:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 |= 0x02;		//Enable Timer 1 to generate interrupts.
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
	sei();				//Allow any source to interrupt the ATMega328PB CPU.
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x2e>

00000112 <__vector_11>:
						//and it will not interfere with the breathing LCD - HOORAY for
						//interrupts!
}

ISR(TIMER1_COMPA_vect)            //Timer 1 Interrupt Handler in C
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	if (dir == 1 && OCR1A < 2075) //When dir = 1, the LCD gets brighter.
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	99 f4       	brne	.+38     	; 0x154 <__vector_11+0x42>
 12e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 132:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 136:	8b 31       	cpi	r24, 0x1B	; 27
 138:	98 40       	sbci	r25, 0x08	; 8
 13a:	60 f4       	brcc	.+24     	; 0x154 <__vector_11+0x42>
	{
		OCR1A += 5;				  //Instead of incrementing by 5 try 1,...
 13c:	e8 e8       	ldi	r30, 0x88	; 136
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
 144:	05 96       	adiw	r24, 0x05	; 5
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
	}							  //2, 3, 4, 6, 7, 8, 9, or etc...
	else
	{
		dir = 0;				 //Switch direction to dimmer.
	}
	if (dir == 0 && OCR1A > 0)	//When dir = 0, the LCD is getting dimmer.
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14e:	81 11       	cpse	r24, r1
 150:	11 c0       	rjmp	.+34     	; 0x174 <__vector_11+0x62>
 152:	02 c0       	rjmp	.+4      	; 0x158 <__vector_11+0x46>
	{
		OCR1A += 5;				  //Instead of incrementing by 5 try 1,...
	}							  //2, 3, 4, 6, 7, 8, 9, or etc...
	else
	{
		dir = 0;				 //Switch direction to dimmer.
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	if (dir == 0 && OCR1A > 0)	//When dir = 0, the LCD is getting dimmer.
 158:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 15c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 160:	89 2b       	or	r24, r25
 162:	41 f0       	breq	.+16     	; 0x174 <__vector_11+0x62>
	{
		OCR1A -= 5;				//You could cause the LCD to get dimmer faster than...
 164:	e8 e8       	ldi	r30, 0x88	; 136
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	05 97       	sbiw	r24, 0x05	; 5
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
 172:	03 c0       	rjmp	.+6      	; 0x17a <__vector_11+0x68>
	}							//than it gets brighter or vice-versa.
	else
	{
		dir = 1;				//Switch direction to brighter.
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>


TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080016c  0080016c  00000e98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001357  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbe  00000000  00000000  000022f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000754  00000000  00000000  00002eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064b  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079e  00000000  00000000  00003db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b4:	03 6e       	ori	r16, 0xE3	; 227
  b6:	db 36       	cpi	r29, 0x6B	; 107
  b8:	3d 9a       	sbi	0x07, 5	; 7
  ba:	99 99       	sbic	0x13, 1	; 19
  bc:	99 3d       	cpi	r25, 0xD9	; 217
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	3e 00       	.word	0x003e	; ????
  c4:	00 00       	nop
  c6:	80 3f       	cpi	r24, 0xF0	; 240
  c8:	07 2c       	mov	r0, r7
  ca:	7a a5       	ldd	r23, Y+42	; 0x2a
  cc:	ba 6c       	ori	r27, 0xCA	; 202
  ce:	c5 90       	lpm	r12, Z+
  d0:	da 3b       	cpi	r29, 0xBA	; 186
  d2:	93 65       	ori	r25, 0x53	; 83
  d4:	fc 8b       	std	Y+20, r31	; 0x14
  d6:	bc 53       	subi	r27, 0x3C	; 60
  d8:	f8 10       	cpse	r15, r8
  da:	fd 3c       	cpi	r31, 0xCD	; 205
  dc:	56 92       	lac	Z, r5
  de:	83 4d       	sbci	r24, 0xD3	; 211
  e0:	bd 87       	std	Y+13, r27	; 0x0d
  e2:	9d 3a       	cpi	r25, 0xAD	; 173
  e4:	b6 3d       	cpi	r27, 0xD6	; 214
  e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
  e8:	bf 5b       	subi	r27, 0xBF	; 191
  ea:	be 73       	andi	r27, 0x3E	; 62
  ec:	da 0f       	add	r29, r26
  ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
  f0:	11 24       	eor	r1, r1
  f2:	1f be       	out	0x3f, r1	; 63
  f4:	cf ef       	ldi	r28, 0xFF	; 255
  f6:	d8 e0       	ldi	r29, 0x08	; 8
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
  fc:	11 e0       	ldi	r17, 0x01	; 1
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	e8 e9       	ldi	r30, 0x98	; 152
 104:	fd e0       	ldi	r31, 0x0D	; 13
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
 108:	05 90       	lpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	ac 36       	cpi	r26, 0x6C	; 108
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	ac e6       	ldi	r26, 0x6C	; 108
 116:	b1 e0       	ldi	r27, 0x01	; 1
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	a8 3a       	cpi	r26, 0xA8	; 168
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
 122:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
 126:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <_exit>

0000012a <__bad_interrupt>:
 12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <Mega328P_Init>:
.section ".text"			//Declare this is for code
.global Mega328P_Init
Mega328P_Init:
		//***********************************************
		//initialize PB0(R*W),PB1(RS),PB2(E) as fixed cleared outputs
		ldi		r16,0x07		//Load 0000 0111 into r16
 12e:	07 e0       	ldi	r16, 0x07	; 7
		out		DDRB,r16		//Load r16 into DDRB setting PB0, PB1, and PB2 and out-puts
 130:	04 b9       	out	0x04, r16	; 4
		ldi		r16,0			//Set r16 to 0
 132:	00 e0       	ldi	r16, 0x00	; 0
		out		PORTB,r16		//Use r16 to clear PORTB data
 134:	05 b9       	out	0x05, r16	; 5
		//***********************************************
		//initialize UART, 8bits, no parity, 1 stop, 9600
		out		U2X0,r16		//Write r16(0) to U2X0
 136:	01 b9       	out	0x01, r16	; 1
		ldi		r17,0x0			//r17 0
 138:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16,0x67		//r16 0110 0111 9600 baud
 13a:	07 e6       	ldi	r16, 0x67	; 103
		sts		UBRR0H,r17		//Sets baud rate register to 103 
 13c:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		sts		UBRR0L,r16		//
 140:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		ldi		r16,24			//0001 1000
 144:	08 e1       	ldi	r16, 0x18	; 24
		sts		UCSR0B,r16		//Enable USART reciever and transmitter
 146:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		ldi		r16,6			//0000 0110
 14a:	06 e0       	ldi	r16, 0x06	; 6
		sts		UCSR0C,r16		//bit 7&6 enable Async USART, 5&4 no parity, 3 sets 1 stop bit, 				bit 2 from UCSR0B and bit 2&1 from here set 8 data bits (011)
 14c:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
		//************************************************
		//initialize ADC
		ldi		r16,0x87		//1000 0111
 150:	07 e8       	ldi	r16, 0x87	; 135
		sts		ADCSRA,r16		//ADC Enable, Division factor 128
 152:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
//		ldi		r16,0x40		//0100 0000
//		sts		ADMUX,r16		//Aet ADV voltage ref to AV_cc, set input to ADC0
		ldi		r16,0			//0000 0000
 156:	00 e0       	ldi	r16, 0x00	; 0
		sts		ADCSRB,r16		//Sets ADC Auto Trigger source to free running mode
 158:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
		ldi		r16,0xFE		//1111 1110
 15c:	0e ef       	ldi	r16, 0xFE	; 254
		sts		DIDR0,r16		//Disables digital input on pints 7-1
 15e:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
		ldi		r16,0xFF		//1111 1111
 162:	0f ef       	ldi	r16, 0xFF	; 255
		sts		DIDR1,r16		//Disables digital input on AIN1 and AIN0
 164:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
		//************************************************
		ret					//student comment here
 168:	08 95       	ret

0000016a <UART_On>:

.global UART_On
UART_On:
	ldi	r16,2					//0000 0010
 16a:	02 e0       	ldi	r16, 0x02	; 2
	out	DDRD,r16				//Set pin as output
 16c:	0a b9       	out	0x0a, r16	; 10
	ldi	r16,24					//0001 1000
 16e:	08 e1       	ldi	r16, 0x18	; 24
	sts	UCSR0B,r16				//Enable reciever and transmitter
 170:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	ret
 174:	08 95       	ret

00000176 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//Clear 16
 176:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//Disable reciever and transmitter
 178:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	ret	
 17c:	08 95       	ret

0000017e <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//Load control register a into r16
 17e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r16,RXC0			//Skip if recieve not complete
 182:	07 ff       	sbrs	r16, 7
	ret							//Return if recieve complete
 184:	08 95       	ret
	lds		r16,UDR0			//load data register into udr0
 186:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	rjmp	UART_Clear			//Restart
 18a:	f9 cf       	rjmp	.-14     	; 0x17e <UART_Clear>

0000018c <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//Load USCROA into r16
 18c:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r16,RXC0			//Skip next if RXCO is set (Recieve complete)
 190:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//Jump back if not done recieving
 192:	fc cf       	rjmp	.-8      	; 0x18c <UART_Get>
	lds		r16,UDR0			//Load uart data register 16
 194:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	sts		ASCII,r16			//Store r16 into ASCII var
 198:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <ASCII>
	ret	
 19c:	08 95       	ret

0000019e <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//Load status register A into r17
 19e:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r17,UDRE0			//Skip if data register not ready
 1a2:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//Restart if data register not ready
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <UART_Put>
	lds		r16,ASCII			//Load input to r16
 1a6:	00 91 80 01 	lds	r16, 0x0180	; 0x800180 <ASCII>
	sts		UDR0,r16			//write input to data register
 1aa:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	ret		
 1ae:	08 95       	ret

000001b0 <ADC_Get_X>:

.global ADC_Get_X
ADC_Get_X:
		ldi		r16,0x40			//0100 0000
 1b0:	00 e4       	ldi	r16, 0x40	; 64
		sts		ADMUX,r16			//Aet ADV voltage ref to AV_cc, set input to ADC0
 1b2:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		ldi		r16,0xC7			//11000111
 1b6:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//Enable adc, start conversion, division factor 128
 1b8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000001bc <A2V1_X>:
A2V1_X:	lds		r16,ADCSRA			//Load ADCSRA into r16
 1bc:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbrc	r16,ADSC			//Skip if start conversion bit is clear
 1c0:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1_X				//Jump if not clear (conversion not complete)
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <A2V1_X>
		lds		r16,ADCL			//Load ADC low register
 1c4:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		sts		LADC,r16			//put low register into low global var
 1c8:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <LADC>
		lds		r16,ADCH			//Load ADC high register
 1cc:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		sts		HADC,r16			//put high register into high global var
 1d0:	00 93 75 01 	sts	0x0175, r16	; 0x800175 <HADC>
		ret
 1d4:	08 95       	ret

000001d6 <ADC_Get_Y>:

.global ADC_Get_Y
ADC_Get_Y:
		ldi		r16,0x41			//0100 0001
 1d6:	01 e4       	ldi	r16, 0x41	; 65
		sts		ADMUX,r16			//Aet ADV voltage ref to AV_cc, set input to ADC1
 1d8:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		ldi		r16,0xC7			//11000111
 1dc:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//Enable adc, start conversion, division factor 128
 1de:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000001e2 <A2V1_Y>:
A2V1_Y:	lds		r16,ADCSRA			//Load ADCSRA into r16
 1e2:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbrc	r16,ADSC			//Skip if start conversion bit is clear
 1e6:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1_Y				//Jump if not clear (conversion not complete)
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <A2V1_Y>
		lds		r16,ADCL			//Load ADC low register
 1ea:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		sts		LADC,r16			//put low register into low global var
 1ee:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <LADC>
		lds		r16,ADCH			//Load ADC high register
 1f2:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		sts		HADC,r16			//put high register into high global var
 1f6:	00 93 75 01 	sts	0x0175, r16	; 0x800175 <HADC>
 1fa:	08 95       	ret

000001fc <return_string>:
   unsigned long				long_num,
	char							exp_base,
	char							exp,
	char							ch[]
	)
   {
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	c8 2f       	mov	r28, r24
 20a:	cb 01       	movw	r24, r22
 20c:	ba 01       	movw	r22, r20
 20e:	12 2f       	mov	r17, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 210:	a7 01       	movw	r20, r14
 212:	4f 5f       	subi	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255
 216:	2a e0       	ldi	r18, 0x0A	; 10
 218:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__ultoa_ncheck>
   //if you use Imagecraft C Compiler change ultoa to ltoa
   //convert long to char in base 10 (note: this call takes about as much time
   //as the rest of the routine!!
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;
 21c:	f7 01       	movw	r30, r14
 21e:	c0 83       	st	Z, r28

   //get size of array
   while (ch[end_of_array] != '\0')
 220:	cc 23       	and	r28, r28
 222:	c9 f0       	breq	.+50     	; 0x256 <return_string+0x5a>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 c0       	rjmp	.+2      	; 0x22a <return_string+0x2e>
   	{
      end_of_array++;
 228:	98 2f       	mov	r25, r24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	89 0f       	add	r24, r25
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
 22e:	c8 2f       	mov	r28, r24
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	f7 01       	movw	r30, r14
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	20 81       	ld	r18, Z
 23a:	21 11       	cpse	r18, r1
 23c:	f5 cf       	rjmp	.-22     	; 0x228 <return_string+0x2c>
   	{
      end_of_array++;
      }

   array_count = end_of_array - 6;
 23e:	95 50       	subi	r25, 0x05	; 5
   n = end_of_array;

   //move 5 digits over one to the right to make room for the '.'
	while (n > array_count)
 240:	98 17       	cp	r25, r24
 242:	68 f4       	brcc	.+26     	; 0x25e <return_string+0x62>
	  	{
	 	ch[n+1] = ch[n];
 244:	f7 01       	movw	r30, r14
 246:	e8 0f       	add	r30, r24
 248:	f1 1d       	adc	r31, r1
 24a:	20 81       	ld	r18, Z
 24c:	21 83       	std	Z+1, r18	; 0x01
	  	n--;
 24e:	81 50       	subi	r24, 0x01	; 1

   array_count = end_of_array - 6;
   n = end_of_array;

   //move 5 digits over one to the right to make room for the '.'
	while (n > array_count)
 250:	98 13       	cpse	r25, r24
 252:	f8 cf       	rjmp	.-16     	; 0x244 <return_string+0x48>
 254:	05 c0       	rjmp	.+10     	; 0x260 <return_string+0x64>
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
	char							exp,
	char							ch[]
	)
   {
   unsigned char				array_count;
   unsigned char				end_of_array = 0;
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <return_string+0x64>
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
   	{
      end_of_array++;
 25e:	98 2f       	mov	r25, r24
	while (n > array_count)
	  	{
	 	ch[n+1] = ch[n];
	  	n--;
	  	}
	ch[n + 1] = '.';
 260:	f7 01       	movw	r30, r14
 262:	e9 0f       	add	r30, r25
 264:	f1 1d       	adc	r31, r1
 266:	8e e2       	ldi	r24, 0x2E	; 46
 268:	81 83       	std	Z+1, r24	; 0x01

   if (exp_base == 0)
 26a:	11 23       	and	r17, r17
 26c:	71 f0       	breq	.+28     	; 0x28a <return_string+0x8e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 26e:	be 01       	movw	r22, r28
 270:	6e 5f       	subi	r22, 0xFE	; 254
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	6e 0d       	add	r22, r14
 276:	7f 1d       	adc	r23, r15
 278:	4a e0       	ldi	r20, 0x0A	; 10
 27a:	80 2f       	mov	r24, r16
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 73 06 	call	0xce6	; 0xce6 <__itoa_ncheck>
   	{
      //get exp value
      itoa((int)exp, &ch[end_of_array + 2], 10);

      #if USE_BASE_2_EXP == 1
			ch[end_of_array+1] = 't';
 282:	ce 0d       	add	r28, r14
 284:	df 1d       	adc	r29, r15
 286:	84 e7       	ldi	r24, 0x74	; 116
 288:	89 83       	std	Y+1, r24	; 0x01
	      ch[end_of_array+1] = 'e';
   	#endif

      return;
      }
	}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <ftoa>:
void												ftoa
	(
   float							fp,
   char							ch[]
   )
   {
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	4b 01       	movw	r8, r22
 2aa:	5c 01       	movw	r10, r24
 2ac:	7a 01       	movw	r14, r20
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0

   //1] set n to 0
   n = 0;

   //2] set F to 0
   fixed_point = 0;
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	ba 01       	movw	r22, r20

	while (n < SIZE_OF_MANTISSA)
   	{
   	//3] read nth bit counting from LSB of floating point number, if 1,
      //   add 1 to F
		if (((*fake_fp_pointer >> n) & 0x01) == 1)
 2b8:	95 01       	movw	r18, r10
 2ba:	84 01       	movw	r16, r8
 2bc:	08 2e       	mov	r0, r24
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <ftoa+0x30>
 2c0:	35 95       	asr	r19
 2c2:	27 95       	ror	r18
 2c4:	17 95       	ror	r17
 2c6:	07 95       	ror	r16
 2c8:	0a 94       	dec	r0
 2ca:	d2 f7       	brpl	.-12     	; 0x2c0 <ftoa+0x28>
 2cc:	00 ff       	sbrs	r16, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <ftoa+0x40>
   		{
      	fixed_point += 100000;
 2d0:	40 56       	subi	r20, 0x60	; 96
 2d2:	59 47       	sbci	r21, 0x79	; 121
 2d4:	6e 4f       	sbci	r22, 0xFE	; 254
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
      	}

  	 	//4] divide F by 2
   	fixed_point = fixed_point >> 1;
 2d8:	76 95       	lsr	r23
 2da:	67 95       	ror	r22
 2dc:	57 95       	ror	r21
 2de:	47 95       	ror	r20
 2e0:	01 96       	adiw	r24, 0x01	; 1
   n = 0;

   //2] set F to 0
   fixed_point = 0;

	while (n < SIZE_OF_MANTISSA)
 2e2:	87 31       	cpi	r24, 0x17	; 23
 2e4:	91 05       	cpc	r25, r1
 2e6:	41 f7       	brne	.-48     	; 0x2b8 <ftoa+0x20>
      //5] Increment n
      n++;
      }

 	//there is an extra 1 that is dropped by floating point
   fixed_point += 100000;
 2e8:	40 56       	subi	r20, 0x60	; 96
 2ea:	59 47       	sbci	r21, 0x79	; 121
 2ec:	6e 4f       	sbci	r22, 0xFE	; 254
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

   //now convert the exponent to signed type
   exponent = (unsigned char)(*fake_fp_pointer >> BITS_UNTIL_EXPONENT)  - 127;
 2f0:	95 01       	movw	r18, r10
 2f2:	84 01       	movw	r16, r8
 2f4:	0f 2e       	mov	r0, r31
 2f6:	f7 e1       	ldi	r31, 0x17	; 23
 2f8:	35 95       	asr	r19
 2fa:	27 95       	ror	r18
 2fc:	17 95       	ror	r17
 2fe:	07 95       	ror	r16
 300:	fa 95       	dec	r31
 302:	d1 f7       	brne	.-12     	; 0x2f8 <ftoa+0x60>
 304:	f0 2d       	mov	r31, r0
 306:	0f 57       	subi	r16, 0x7F	; 127

   //finally set up sign of mantissa if applicable
   if (((*fake_fp_pointer >> BITS_UNTIL_SIGN) & 0x01) == 1)
 308:	bb 20       	and	r11, r11
 30a:	14 f0       	brlt	.+4      	; 0x310 <ftoa+0x78>
   	{
     	sign = '-';
      }
   else
   	{
      sign = '+';
 30c:	eb e2       	ldi	r30, 0x2B	; 43
 30e:	01 c0       	rjmp	.+2      	; 0x312 <ftoa+0x7a>
   exponent = (unsigned char)(*fake_fp_pointer >> BITS_UNTIL_EXPONENT)  - 127;

   //finally set up sign of mantissa if applicable
   if (((*fake_fp_pointer >> BITS_UNTIL_SIGN) & 0x01) == 1)
   	{
     	sign = '-';
 310:	ed e2       	ldi	r30, 0x2D	; 45
      sign = '+';
      }

   //convert to a "normal" number if the number is smallish
	#if USE_E_ONLY_WHEN_NEEDED == 1
	if (exponent  >= 0 && exponent <= 10)
 312:	0b 30       	cpi	r16, 0x0B	; 11
 314:	98 f4       	brcc	.+38     	; 0x33c <ftoa+0xa4>
	   {
	   fixed_point *= 1 << exponent;
		return_string(sign, fixed_point, 0, 0, ch);
 316:	a1 e0       	ldi	r26, 0x01	; 1
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <ftoa+0x88>
 31c:	aa 0f       	add	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	0a 95       	dec	r16
 322:	e2 f7       	brpl	.-8      	; 0x31c <ftoa+0x84>
 324:	9a 01       	movw	r18, r20
 326:	ab 01       	movw	r20, r22
 328:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulshisi3>
 32c:	ab 01       	movw	r20, r22
 32e:	bc 01       	movw	r22, r24
 330:	00 e0       	ldi	r16, 0x00	; 0
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	8e 2f       	mov	r24, r30
 336:	0e 94 fe 00 	call	0x1fc	; 0x1fc <return_string>
      return;
 33a:	04 c0       	rjmp	.+8      	; 0x344 <ftoa+0xac>
      return;
		}
   #endif

   #if USE_BASE_2_EXP == 1
  	return_string(sign, fixed_point, 2, exponent, ch);
 33c:	22 e0       	ldi	r18, 0x02	; 2
 33e:	8e 2f       	mov	r24, r30
 340:	0e 94 fe 00 	call	0x1fc	; 0x1fc <return_string>

   return_string(sign, fixed_point, 10, exponent_10x, ch);
	#endif
   
   return;
   }
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	bf 90       	pop	r11
 34e:	af 90       	pop	r10
 350:	9f 90       	pop	r9
 352:	8f 90       	pop	r8
 354:	08 95       	ret

00000356 <UART_Puts>:

volatile uint8_t flag = 0; // Volatile to ensure proper access across interrupt handler
// Interrupt Service Routine (ISR) for INT0
ISR(INT0_vect) {
	flag = 1; // Set the flag when the interrupt is triggered
}
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
 35c:	98 81       	ld	r25, Y
 35e:	99 23       	and	r25, r25
 360:	41 f0       	breq	.+16     	; 0x372 <UART_Puts+0x1c>
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <ASCII>
 368:	0e 94 cf 00 	call	0x19e	; 0x19e <UART_Put>
 36c:	99 91       	ld	r25, Y+
 36e:	91 11       	cpse	r25, r1
 370:	f9 cf       	rjmp	.-14     	; 0x364 <UART_Puts+0xe>
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <Banner>:
 378:	8f e2       	ldi	r24, 0x2F	; 47
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
 380:	83 e2       	ldi	r24, 0x23	; 35
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
 388:	89 e1       	ldi	r24, 0x19	; 25
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
 390:	08 95       	ret

00000392 <ADC>:
EICRA = 0b00000010; // Interrupt on falling edge
EIMSK = 0b00000001; // Enable INT0

void ftoa (float fp,char ch[]);
void ADC(void)						//Analog to Digital Converter for X-axis (Joystick configuration: Wire leads = North)
{
 392:	4f 92       	push	r4
 394:	5f 92       	push	r5
 396:	6f 92       	push	r6
 398:	7f 92       	push	r7
 39a:	8f 92       	push	r8
 39c:	9f 92       	push	r9
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	UART_Puts("X:");
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	ADC_Get_X();
 3ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ADC_Get_X>
	acc_X = ((((float)HADC) * 0x100 + (float)(LADC))-508.99968)*(-1);
 3be:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <HADC>
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	53 e4       	ldi	r21, 0x43	; 67
 3d4:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 3d8:	6b 01       	movw	r12, r22
 3da:	7c 01       	movw	r14, r24
 3dc:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <LADC>
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 3ea:	9b 01       	movw	r18, r22
 3ec:	ac 01       	movw	r20, r24
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 3f6:	26 ef       	ldi	r18, 0xF6	; 246
 3f8:	3f e7       	ldi	r19, 0x7F	; 127
 3fa:	4e ef       	ldi	r20, 0xFE	; 254
 3fc:	53 e4       	ldi	r21, 0x43	; 67
 3fe:	0e 94 47 03 	call	0x68e	; 0x68e <__subsf3>
 402:	90 58       	subi	r25, 0x80	; 128
 404:	0e 94 46 04 	call	0x88c	; 0x88c <__fixsfsi>
 408:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <acc_X+0x1>
 40c:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <acc_X>
	ftoa(acc_X, temp_X);
 410:	07 2e       	mov	r0, r23
 412:	00 0c       	add	r0, r0
 414:	88 0b       	sbc	r24, r24
 416:	99 0b       	sbc	r25, r25
 418:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 41c:	4e e9       	ldi	r20, 0x9E	; 158
 41e:	51 e0       	ldi	r21, 0x01	; 1
 420:	0e 94 4c 01 	call	0x298	; 0x298 <ftoa>
	UART_Puts(temp_X);
 424:	8e e9       	ldi	r24, 0x9E	; 158
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	
	UART_Puts(", Y:");
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	ADC_Get_Y();
 434:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ADC_Get_Y>
	acc_Y = ((((float)HADC) * 0x100 + (float)(LADC))-522.997766)*(-1);
 438:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <HADC>
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e8       	ldi	r20, 0x80	; 128
 44c:	53 e4       	ldi	r21, 0x43	; 67
 44e:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 452:	6b 01       	movw	r12, r22
 454:	7c 01       	movw	r14, r24
 456:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <LADC>
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 464:	9b 01       	movw	r18, r22
 466:	ac 01       	movw	r20, r24
 468:	c7 01       	movw	r24, r14
 46a:	b6 01       	movw	r22, r12
 46c:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 470:	2b ed       	ldi	r18, 0xDB	; 219
 472:	3f eb       	ldi	r19, 0xBF	; 191
 474:	42 e0       	ldi	r20, 0x02	; 2
 476:	54 e4       	ldi	r21, 0x44	; 68
 478:	0e 94 47 03 	call	0x68e	; 0x68e <__subsf3>
 47c:	90 58       	subi	r25, 0x80	; 128
 47e:	0e 94 46 04 	call	0x88c	; 0x88c <__fixsfsi>
 482:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <acc_Y+0x1>
 486:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <acc_Y>
	ftoa(acc_Y, temp_Y);
 48a:	07 2e       	mov	r0, r23
 48c:	00 0c       	add	r0, r0
 48e:	88 0b       	sbc	r24, r24
 490:	99 0b       	sbc	r25, r25
 492:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 496:	46 e7       	ldi	r20, 0x76	; 118
 498:	51 e0       	ldi	r21, 0x01	; 1
 49a:	0e 94 4c 01 	call	0x298	; 0x298 <ftoa>
	UART_Puts(temp_Y);
 49e:	86 e7       	ldi	r24, 0x76	; 118
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	
	
	UART_Puts(", Degrees:");
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	float a = sqrt(acc_Y*acc_Y);
 4ae:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <acc_Y>
 4b2:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <acc_Y+0x1>
 4b6:	00 9f       	mul	r16, r16
 4b8:	60 01       	movw	r12, r0
 4ba:	01 9f       	mul	r16, r17
 4bc:	d0 0c       	add	r13, r0
 4be:	d0 0c       	add	r13, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	0d 2c       	mov	r0, r13
 4c4:	00 0c       	add	r0, r0
 4c6:	ee 08       	sbc	r14, r14
 4c8:	ff 08       	sbc	r15, r15
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 4d2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sqrt>
 4d6:	6b 01       	movw	r12, r22
 4d8:	7c 01       	movw	r14, r24
	float b = sqrt(acc_X*acc_X);
 4da:	c0 91 98 01 	lds	r28, 0x0198	; 0x800198 <acc_X>
 4de:	d0 91 99 01 	lds	r29, 0x0199	; 0x800199 <acc_X+0x1>
 4e2:	cc 9f       	mul	r28, r28
 4e4:	40 01       	movw	r8, r0
 4e6:	cd 9f       	mul	r28, r29
 4e8:	90 0c       	add	r9, r0
 4ea:	90 0c       	add	r9, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	09 2c       	mov	r0, r9
 4f0:	00 0c       	add	r0, r0
 4f2:	aa 08       	sbc	r10, r10
 4f4:	bb 08       	sbc	r11, r11
 4f6:	c5 01       	movw	r24, r10
 4f8:	b4 01       	movw	r22, r8
 4fa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 4fe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sqrt>
 502:	4b 01       	movw	r8, r22
 504:	5c 01       	movw	r10, r24
	float c = sqrt((a*a) + (b*b));
 506:	a7 01       	movw	r20, r14
 508:	96 01       	movw	r18, r12
 50a:	c7 01       	movw	r24, r14
 50c:	b6 01       	movw	r22, r12
 50e:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 512:	2b 01       	movw	r4, r22
 514:	3c 01       	movw	r6, r24
 516:	a5 01       	movw	r20, r10
 518:	94 01       	movw	r18, r8
 51a:	c5 01       	movw	r24, r10
 51c:	b4 01       	movw	r22, r8
 51e:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 522:	9b 01       	movw	r18, r22
 524:	ac 01       	movw	r20, r24
 526:	c3 01       	movw	r24, r6
 528:	b2 01       	movw	r22, r4
 52a:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 52e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sqrt>
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
	float rad = asin(a/c);
 536:	c7 01       	movw	r24, r14
 538:	b6 01       	movw	r22, r12
 53a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__divsf3>
 53e:	6b 01       	movw	r12, r22
 540:	7c 01       	movw	r14, r24
 542:	0e 94 b4 03 	call	0x768	; 0x768 <asin>
	float deg = rad*(180/3.14159265358979323846);
 546:	20 ee       	ldi	r18, 0xE0	; 224
 548:	3e e2       	ldi	r19, 0x2E	; 46
 54a:	45 e6       	ldi	r20, 0x65	; 101
 54c:	52 e4       	ldi	r21, 0x42	; 66
 54e:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 552:	86 2e       	mov	r8, r22
 554:	97 2e       	mov	r9, r23
 556:	b8 2e       	mov	r11, r24
 558:	a9 2e       	mov	r10, r25
	if(deg < 0){
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	a9 01       	movw	r20, r18
 560:	0e 94 cf 03 	call	0x79e	; 0x79e <__cmpsf2>
 564:	88 23       	and	r24, r24
 566:	7c f4       	brge	.+30     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
		deg += 360;
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	44 eb       	ldi	r20, 0xB4	; 180
 56e:	53 e4       	ldi	r21, 0x43	; 67
 570:	68 2d       	mov	r22, r8
 572:	79 2d       	mov	r23, r9
 574:	8b 2d       	mov	r24, r11
 576:	9a 2d       	mov	r25, r10
 578:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 57c:	26 2f       	mov	r18, r22
 57e:	37 2f       	mov	r19, r23
 580:	e8 2f       	mov	r30, r24
 582:	f9 2f       	mov	r31, r25
 584:	04 c0       	rjmp	.+8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
	UART_Puts(", Degrees:");
	float a = sqrt(acc_Y*acc_Y);
	float b = sqrt(acc_X*acc_X);
	float c = sqrt((a*a) + (b*b));
	float rad = asin(a/c);
	float deg = rad*(180/3.14159265358979323846);
 586:	28 2d       	mov	r18, r8
 588:	39 2d       	mov	r19, r9
 58a:	eb 2d       	mov	r30, r11
 58c:	fa 2d       	mov	r31, r10
	if(deg < 0){
		deg += 360;
	}
	if(acc_X < 0 && acc_Y > 0){
 58e:	dd 23       	and	r29, r29
 590:	5c f5       	brge	.+86     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 592:	10 16       	cp	r1, r16
 594:	11 06       	cpc	r1, r17
 596:	0c f0       	brlt	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 598:	47 c0       	rjmp	.+142    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
		rad = acos(a/c);
 59a:	c7 01       	movw	r24, r14
 59c:	b6 01       	movw	r22, r12
 59e:	0e 94 36 03 	call	0x66c	; 0x66c <acos>
		deg = rad*(180/3.14159265358979323846);
 5a2:	20 ee       	ldi	r18, 0xE0	; 224
 5a4:	3e e2       	ldi	r19, 0x2E	; 46
 5a6:	45 e6       	ldi	r20, 0x65	; 101
 5a8:	52 e4       	ldi	r21, 0x42	; 66
 5aa:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
		deg += 90;
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	44 eb       	ldi	r20, 0xB4	; 180
 5b4:	52 e4       	ldi	r21, 0x42	; 66
 5b6:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 5ba:	26 2f       	mov	r18, r22
 5bc:	37 2f       	mov	r19, r23
 5be:	e8 2f       	mov	r30, r24
 5c0:	f9 2f       	mov	r31, r25
 5c2:	32 c0       	rjmp	.+100    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
	if(acc_X < 0 && acc_Y < 0){
		rad = asin(a/c);
		deg = rad*(180/3.14159265358979323846);
		deg += 180;
	}
	if(acc_X > 0 && acc_Y < 0){
 5c4:	1c 16       	cp	r1, r28
 5c6:	1d 06       	cpc	r1, r29
 5c8:	a4 f0       	brlt	.+40     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
		deg += 90;
	}
	if(acc_X < 0 && acc_Y < 0){
		rad = asin(a/c);
		deg = rad*(180/3.14159265358979323846);
		deg += 180;
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	44 e3       	ldi	r20, 0x34	; 52
 5d0:	53 e4       	ldi	r21, 0x43	; 67
 5d2:	68 2d       	mov	r22, r8
 5d4:	79 2d       	mov	r23, r9
 5d6:	8b 2d       	mov	r24, r11
 5d8:	9a 2d       	mov	r25, r10
 5da:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 5de:	26 2f       	mov	r18, r22
 5e0:	37 2f       	mov	r19, r23
 5e2:	e8 2f       	mov	r30, r24
 5e4:	f9 2f       	mov	r31, r25
 5e6:	13 c0       	rjmp	.+38     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
	}
	if(acc_X > 0 && acc_Y < 0){
 5e8:	1c 16       	cp	r1, r28
 5ea:	1d 06       	cpc	r1, r29
 5ec:	84 f4       	brge	.+32     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 5ee:	11 23       	and	r17, r17
 5f0:	74 f4       	brge	.+28     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		rad = asin(a/c);
		deg = rad*(180/3.14159265358979323846);
		deg += 270;
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	47 e8       	ldi	r20, 0x87	; 135
 5f8:	53 e4       	ldi	r21, 0x43	; 67
 5fa:	68 2d       	mov	r22, r8
 5fc:	79 2d       	mov	r23, r9
 5fe:	8b 2d       	mov	r24, r11
 600:	9a 2d       	mov	r25, r10
 602:	0e 94 48 03 	call	0x690	; 0x690 <__addsf3>
 606:	26 2f       	mov	r18, r22
 608:	37 2f       	mov	r19, r23
 60a:	e8 2f       	mov	r30, r24
 60c:	f9 2f       	mov	r31, r25
	}
	
	ftoa(deg, temp_Deg);
 60e:	46 e8       	ldi	r20, 0x86	; 134
 610:	51 e0       	ldi	r21, 0x01	; 1
 612:	62 2f       	mov	r22, r18
 614:	73 2f       	mov	r23, r19
 616:	8e 2f       	mov	r24, r30
 618:	9f 2f       	mov	r25, r31
 61a:	0e 94 4c 01 	call	0x298	; 0x298 <ftoa>
	
	UART_Puts(temp_Deg);
 61e:	86 e8       	ldi	r24, 0x86	; 134
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
}
 626:	03 c0       	rjmp	.+6      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
	if(acc_X < 0 && acc_Y > 0){
		rad = acos(a/c);
		deg = rad*(180/3.14159265358979323846);
		deg += 90;
	}
	if(acc_X < 0 && acc_Y < 0){
 628:	11 23       	and	r17, r17
 62a:	8c f7       	brge	.-30     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 62c:	cb cf       	rjmp	.-106    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
	}
	
	ftoa(deg, temp_Deg);
	
	UART_Puts(temp_Deg);
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	7f 90       	pop	r7
 648:	6f 90       	pop	r6
 64a:	5f 90       	pop	r5
 64c:	4f 90       	pop	r4
 64e:	08 95       	ret

00000650 <Command>:

void Command(void)					//command interpreter
{
	UART_Puts("\r    ");
 650:	83 e1       	ldi	r24, 0x13	; 19
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 ab 01 	call	0x356	; 0x356 <UART_Puts>
	ADC();
 658:	0e 94 c9 01 	call	0x392	; 0x392 <ADC>
 65c:	08 95       	ret

0000065e <main>:
}

int main(void)
{
	Mega328P_Init();
 65e:	0e 94 97 00 	call	0x12e	; 0x12e <Mega328P_Init>
	Banner();
 662:	0e 94 bc 01 	call	0x378	; 0x378 <Banner>
	while (1)
	{
		Command();				//infinite command loop
 666:	0e 94 28 03 	call	0x650	; 0x650 <Command>
 66a:	fd cf       	rjmp	.-6      	; 0x666 <main+0x8>

0000066c <acos>:
 66c:	9f 93       	push	r25
 66e:	9f 77       	andi	r25, 0x7F	; 127
 670:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_arccos>
 674:	0f 90       	pop	r0
 676:	00 20       	and	r0, r0
 678:	42 f4       	brpl	.+16     	; 0x68a <acos+0x1e>
 67a:	90 58       	subi	r25, 0x80	; 128
 67c:	a2 ea       	ldi	r26, 0xA2	; 162
 67e:	2a ed       	ldi	r18, 0xDA	; 218
 680:	3f e0       	ldi	r19, 0x0F	; 15
 682:	49 e4       	ldi	r20, 0x49	; 73
 684:	50 e4       	ldi	r21, 0x40	; 64
 686:	0e 94 5f 03 	call	0x6be	; 0x6be <__addsf3x>
 68a:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>

0000068e <__subsf3>:
 68e:	50 58       	subi	r21, 0x80	; 128

00000690 <__addsf3>:
 690:	bb 27       	eor	r27, r27
 692:	aa 27       	eor	r26, r26
 694:	0e 94 5f 03 	call	0x6be	; 0x6be <__addsf3x>
 698:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 69c:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 6a0:	38 f0       	brcs	.+14     	; 0x6b0 <__addsf3+0x20>
 6a2:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__addsf3+0x20>
 6a8:	39 f4       	brne	.+14     	; 0x6b8 <__addsf3+0x28>
 6aa:	9f 3f       	cpi	r25, 0xFF	; 255
 6ac:	19 f4       	brne	.+6      	; 0x6b4 <__addsf3+0x24>
 6ae:	26 f4       	brtc	.+8      	; 0x6b8 <__addsf3+0x28>
 6b0:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 6b4:	0e f4       	brtc	.+2      	; 0x6b8 <__addsf3+0x28>
 6b6:	e0 95       	com	r30
 6b8:	e7 fb       	bst	r30, 7
 6ba:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>

000006be <__addsf3x>:
 6be:	e9 2f       	mov	r30, r25
 6c0:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 6c4:	58 f3       	brcs	.-42     	; 0x69c <__addsf3+0xc>
 6c6:	ba 17       	cp	r27, r26
 6c8:	62 07       	cpc	r22, r18
 6ca:	73 07       	cpc	r23, r19
 6cc:	84 07       	cpc	r24, r20
 6ce:	95 07       	cpc	r25, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__addsf3x+0x1c>
 6d2:	79 f4       	brne	.+30     	; 0x6f2 <__addsf3x+0x34>
 6d4:	a6 f5       	brtc	.+104    	; 0x73e <__addsf3x+0x80>
 6d6:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 6da:	0e f4       	brtc	.+2      	; 0x6de <__addsf3x+0x20>
 6dc:	e0 95       	com	r30
 6de:	0b 2e       	mov	r0, r27
 6e0:	ba 2f       	mov	r27, r26
 6e2:	a0 2d       	mov	r26, r0
 6e4:	0b 01       	movw	r0, r22
 6e6:	b9 01       	movw	r22, r18
 6e8:	90 01       	movw	r18, r0
 6ea:	0c 01       	movw	r0, r24
 6ec:	ca 01       	movw	r24, r20
 6ee:	a0 01       	movw	r20, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	ff 27       	eor	r31, r31
 6f4:	59 1b       	sub	r21, r25
 6f6:	99 f0       	breq	.+38     	; 0x71e <__addsf3x+0x60>
 6f8:	59 3f       	cpi	r21, 0xF9	; 249
 6fa:	50 f4       	brcc	.+20     	; 0x710 <__addsf3x+0x52>
 6fc:	50 3e       	cpi	r21, 0xE0	; 224
 6fe:	68 f1       	brcs	.+90     	; 0x75a <__addsf3x+0x9c>
 700:	1a 16       	cp	r1, r26
 702:	f0 40       	sbci	r31, 0x00	; 0
 704:	a2 2f       	mov	r26, r18
 706:	23 2f       	mov	r18, r19
 708:	34 2f       	mov	r19, r20
 70a:	44 27       	eor	r20, r20
 70c:	58 5f       	subi	r21, 0xF8	; 248
 70e:	f3 cf       	rjmp	.-26     	; 0x6f6 <__addsf3x+0x38>
 710:	46 95       	lsr	r20
 712:	37 95       	ror	r19
 714:	27 95       	ror	r18
 716:	a7 95       	ror	r26
 718:	f0 40       	sbci	r31, 0x00	; 0
 71a:	53 95       	inc	r21
 71c:	c9 f7       	brne	.-14     	; 0x710 <__addsf3x+0x52>
 71e:	7e f4       	brtc	.+30     	; 0x73e <__addsf3x+0x80>
 720:	1f 16       	cp	r1, r31
 722:	ba 0b       	sbc	r27, r26
 724:	62 0b       	sbc	r22, r18
 726:	73 0b       	sbc	r23, r19
 728:	84 0b       	sbc	r24, r20
 72a:	ba f0       	brmi	.+46     	; 0x75a <__addsf3x+0x9c>
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	a1 f0       	breq	.+40     	; 0x758 <__addsf3x+0x9a>
 730:	ff 0f       	add	r31, r31
 732:	bb 1f       	adc	r27, r27
 734:	66 1f       	adc	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	c2 f7       	brpl	.-16     	; 0x72c <__addsf3x+0x6e>
 73c:	0e c0       	rjmp	.+28     	; 0x75a <__addsf3x+0x9c>
 73e:	ba 0f       	add	r27, r26
 740:	62 1f       	adc	r22, r18
 742:	73 1f       	adc	r23, r19
 744:	84 1f       	adc	r24, r20
 746:	48 f4       	brcc	.+18     	; 0x75a <__addsf3x+0x9c>
 748:	87 95       	ror	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	08 f0       	brcs	.+2      	; 0x758 <__addsf3x+0x9a>
 756:	b0 cf       	rjmp	.-160    	; 0x6b8 <__addsf3+0x28>
 758:	93 95       	inc	r25
 75a:	88 0f       	add	r24, r24
 75c:	08 f0       	brcs	.+2      	; 0x760 <__addsf3x+0xa2>
 75e:	99 27       	eor	r25, r25
 760:	ee 0f       	add	r30, r30
 762:	97 95       	ror	r25
 764:	87 95       	ror	r24
 766:	08 95       	ret

00000768 <asin>:
 768:	9f 93       	push	r25
 76a:	9f 77       	andi	r25, 0x7F	; 127
 76c:	ee e3       	ldi	r30, 0x3E	; 62
 76e:	89 37       	cpi	r24, 0x79	; 121
 770:	9e 07       	cpc	r25, r30
 772:	28 f4       	brcc	.+10     	; 0x77e <asin+0x16>
 774:	e4 eb       	ldi	r30, 0xB4	; 180
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_powsodd>
 77c:	0c c0       	rjmp	.+24     	; 0x796 <asin+0x2e>
 77e:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_arccos>
 782:	90 58       	subi	r25, 0x80	; 128
 784:	a2 ea       	ldi	r26, 0xA2	; 162
 786:	2a ed       	ldi	r18, 0xDA	; 218
 788:	3f e0       	ldi	r19, 0x0F	; 15
 78a:	49 ec       	ldi	r20, 0xC9	; 201
 78c:	5f e3       	ldi	r21, 0x3F	; 63
 78e:	0e 94 5f 03 	call	0x6be	; 0x6be <__addsf3x>
 792:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_round>
 796:	0f 90       	pop	r0
 798:	07 fc       	sbrc	r0, 7
 79a:	90 58       	subi	r25, 0x80	; 128
 79c:	08 95       	ret

0000079e <__cmpsf2>:
 79e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fp_cmp>
 7a2:	08 f4       	brcc	.+2      	; 0x7a6 <__cmpsf2+0x8>
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	08 95       	ret

000007a8 <__divsf3>:
 7a8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3x>
 7ac:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 7b0:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 7b4:	58 f0       	brcs	.+22     	; 0x7cc <__divsf3+0x24>
 7b6:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 7ba:	40 f0       	brcs	.+16     	; 0x7cc <__divsf3+0x24>
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <__divsf3+0x20>
 7be:	5f 3f       	cpi	r21, 0xFF	; 255
 7c0:	29 f0       	breq	.+10     	; 0x7cc <__divsf3+0x24>
 7c2:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 7c6:	51 11       	cpse	r21, r1
 7c8:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 7cc:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>

000007d0 <__divsf3x>:
 7d0:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 7d4:	68 f3       	brcs	.-38     	; 0x7b0 <__divsf3+0x8>

000007d6 <__divsf3_pse>:
 7d6:	99 23       	and	r25, r25
 7d8:	b1 f3       	breq	.-20     	; 0x7c6 <__divsf3+0x1e>
 7da:	55 23       	and	r21, r21
 7dc:	91 f3       	breq	.-28     	; 0x7c2 <__divsf3+0x1a>
 7de:	95 1b       	sub	r25, r21
 7e0:	55 0b       	sbc	r21, r21
 7e2:	bb 27       	eor	r27, r27
 7e4:	aa 27       	eor	r26, r26
 7e6:	62 17       	cp	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	38 f0       	brcs	.+14     	; 0x7fc <__divsf3_pse+0x26>
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	44 1f       	adc	r20, r20
 7f8:	aa 1f       	adc	r26, r26
 7fa:	a9 f3       	breq	.-22     	; 0x7e6 <__divsf3_pse+0x10>
 7fc:	35 d0       	rcall	.+106    	; 0x868 <__divsf3_pse+0x92>
 7fe:	0e 2e       	mov	r0, r30
 800:	3a f0       	brmi	.+14     	; 0x810 <__divsf3_pse+0x3a>
 802:	e0 e8       	ldi	r30, 0x80	; 128
 804:	32 d0       	rcall	.+100    	; 0x86a <__divsf3_pse+0x94>
 806:	91 50       	subi	r25, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	e6 95       	lsr	r30
 80c:	00 1c       	adc	r0, r0
 80e:	ca f7       	brpl	.-14     	; 0x802 <__divsf3_pse+0x2c>
 810:	2b d0       	rcall	.+86     	; 0x868 <__divsf3_pse+0x92>
 812:	fe 2f       	mov	r31, r30
 814:	29 d0       	rcall	.+82     	; 0x868 <__divsf3_pse+0x92>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	bb 1f       	adc	r27, r27
 81e:	26 17       	cp	r18, r22
 820:	37 07       	cpc	r19, r23
 822:	48 07       	cpc	r20, r24
 824:	ab 07       	cpc	r26, r27
 826:	b0 e8       	ldi	r27, 0x80	; 128
 828:	09 f0       	breq	.+2      	; 0x82c <__divsf3_pse+0x56>
 82a:	bb 0b       	sbc	r27, r27
 82c:	80 2d       	mov	r24, r0
 82e:	bf 01       	movw	r22, r30
 830:	ff 27       	eor	r31, r31
 832:	93 58       	subi	r25, 0x83	; 131
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	3a f0       	brmi	.+14     	; 0x846 <__divsf3_pse+0x70>
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	51 05       	cpc	r21, r1
 83c:	78 f0       	brcs	.+30     	; 0x85c <__divsf3_pse+0x86>
 83e:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 842:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 846:	5f 3f       	cpi	r21, 0xFF	; 255
 848:	e4 f3       	brlt	.-8      	; 0x842 <__divsf3_pse+0x6c>
 84a:	98 3e       	cpi	r25, 0xE8	; 232
 84c:	d4 f3       	brlt	.-12     	; 0x842 <__divsf3_pse+0x6c>
 84e:	86 95       	lsr	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	9f 5f       	subi	r25, 0xFF	; 255
 85a:	c9 f7       	brne	.-14     	; 0x84e <__divsf3_pse+0x78>
 85c:	88 0f       	add	r24, r24
 85e:	91 1d       	adc	r25, r1
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret
 868:	e1 e0       	ldi	r30, 0x01	; 1
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	bb 1f       	adc	r27, r27
 872:	62 17       	cp	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	ba 07       	cpc	r27, r26
 87a:	20 f0       	brcs	.+8      	; 0x884 <__divsf3_pse+0xae>
 87c:	62 1b       	sub	r22, r18
 87e:	73 0b       	sbc	r23, r19
 880:	84 0b       	sbc	r24, r20
 882:	ba 0b       	sbc	r27, r26
 884:	ee 1f       	adc	r30, r30
 886:	88 f7       	brcc	.-30     	; 0x86a <__divsf3_pse+0x94>
 888:	e0 95       	com	r30
 88a:	08 95       	ret

0000088c <__fixsfsi>:
 88c:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixunssfsi>
 890:	68 94       	set
 892:	b1 11       	cpse	r27, r1
 894:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 898:	08 95       	ret

0000089a <__fixunssfsi>:
 89a:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_splitA>
 89e:	88 f0       	brcs	.+34     	; 0x8c2 <__fixunssfsi+0x28>
 8a0:	9f 57       	subi	r25, 0x7F	; 127
 8a2:	98 f0       	brcs	.+38     	; 0x8ca <__fixunssfsi+0x30>
 8a4:	b9 2f       	mov	r27, r25
 8a6:	99 27       	eor	r25, r25
 8a8:	b7 51       	subi	r27, 0x17	; 23
 8aa:	b0 f0       	brcs	.+44     	; 0x8d8 <__fixunssfsi+0x3e>
 8ac:	e1 f0       	breq	.+56     	; 0x8e6 <__fixunssfsi+0x4c>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a f0       	brmi	.+6      	; 0x8be <__fixunssfsi+0x24>
 8b8:	ba 95       	dec	r27
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__fixunssfsi+0x14>
 8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <__fixunssfsi+0x4c>
 8be:	b1 30       	cpi	r27, 0x01	; 1
 8c0:	91 f0       	breq	.+36     	; 0x8e6 <__fixunssfsi+0x4c>
 8c2:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_zero>
 8c6:	b1 e0       	ldi	r27, 0x01	; 1
 8c8:	08 95       	ret
 8ca:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 8ce:	67 2f       	mov	r22, r23
 8d0:	78 2f       	mov	r23, r24
 8d2:	88 27       	eor	r24, r24
 8d4:	b8 5f       	subi	r27, 0xF8	; 248
 8d6:	39 f0       	breq	.+14     	; 0x8e6 <__fixunssfsi+0x4c>
 8d8:	b9 3f       	cpi	r27, 0xF9	; 249
 8da:	cc f3       	brlt	.-14     	; 0x8ce <__fixunssfsi+0x34>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b3 95       	inc	r27
 8e4:	d9 f7       	brne	.-10     	; 0x8dc <__fixunssfsi+0x42>
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__fixunssfsi+0x5c>
 8e8:	90 95       	com	r25
 8ea:	80 95       	com	r24
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__floatunsisf>:
 8f8:	e8 94       	clt
 8fa:	09 c0       	rjmp	.+18     	; 0x90e <__stack+0xf>

000008fc <__floatsisf>:
 8fc:	97 fb       	bst	r25, 7
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__stack+0xf>
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	99 23       	and	r25, r25
 910:	a9 f0       	breq	.+42     	; 0x93c <__stack+0x3d>
 912:	f9 2f       	mov	r31, r25
 914:	96 e9       	ldi	r25, 0x96	; 150
 916:	bb 27       	eor	r27, r27
 918:	93 95       	inc	r25
 91a:	f6 95       	lsr	r31
 91c:	87 95       	ror	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f1 11       	cpse	r31, r1
 926:	f8 cf       	rjmp	.-16     	; 0x918 <__stack+0x19>
 928:	fa f4       	brpl	.+62     	; 0x968 <__stack+0x69>
 92a:	bb 0f       	add	r27, r27
 92c:	11 f4       	brne	.+4      	; 0x932 <__stack+0x33>
 92e:	60 ff       	sbrs	r22, 0
 930:	1b c0       	rjmp	.+54     	; 0x968 <__stack+0x69>
 932:	6f 5f       	subi	r22, 0xFF	; 255
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	16 c0       	rjmp	.+44     	; 0x968 <__stack+0x69>
 93c:	88 23       	and	r24, r24
 93e:	11 f0       	breq	.+4      	; 0x944 <__stack+0x45>
 940:	96 e9       	ldi	r25, 0x96	; 150
 942:	11 c0       	rjmp	.+34     	; 0x966 <__stack+0x67>
 944:	77 23       	and	r23, r23
 946:	21 f0       	breq	.+8      	; 0x950 <__stack+0x51>
 948:	9e e8       	ldi	r25, 0x8E	; 142
 94a:	87 2f       	mov	r24, r23
 94c:	76 2f       	mov	r23, r22
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0x5b>
 950:	66 23       	and	r22, r22
 952:	71 f0       	breq	.+28     	; 0x970 <__stack+0x71>
 954:	96 e8       	ldi	r25, 0x86	; 134
 956:	86 2f       	mov	r24, r22
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	2a f0       	brmi	.+10     	; 0x968 <__stack+0x69>
 95e:	9a 95       	dec	r25
 960:	66 0f       	add	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	da f7       	brpl	.-10     	; 0x95e <__stack+0x5f>
 968:	88 0f       	add	r24, r24
 96a:	96 95       	lsr	r25
 96c:	87 95       	ror	r24
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__fp_arccos>:
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	1f 93       	push	r17
 978:	0f 93       	push	r16
 97a:	8b 01       	movw	r16, r22
 97c:	ec 01       	movw	r28, r24
 97e:	e8 ec       	ldi	r30, 0xC8	; 200
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_powser>
 986:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_round>
 98a:	98 01       	movw	r18, r16
 98c:	ae 01       	movw	r20, r28
 98e:	8b 01       	movw	r16, r22
 990:	ec 01       	movw	r28, r24
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	80 e8       	ldi	r24, 0x80	; 128
 998:	9f e3       	ldi	r25, 0x3F	; 63
 99a:	0e 94 47 03 	call	0x68e	; 0x68e <__subsf3>
 99e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sqrt>
 9a2:	98 01       	movw	r18, r16
 9a4:	ae 01       	movw	r20, r28
 9a6:	0f 91       	pop	r16
 9a8:	1f 91       	pop	r17
 9aa:	cf 91       	pop	r28
 9ac:	df 91       	pop	r29
 9ae:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__mulsf3x>

000009b2 <__fp_cmp>:
 9b2:	99 0f       	add	r25, r25
 9b4:	00 08       	sbc	r0, r0
 9b6:	55 0f       	add	r21, r21
 9b8:	aa 0b       	sbc	r26, r26
 9ba:	e0 e8       	ldi	r30, 0x80	; 128
 9bc:	fe ef       	ldi	r31, 0xFE	; 254
 9be:	16 16       	cp	r1, r22
 9c0:	17 06       	cpc	r1, r23
 9c2:	e8 07       	cpc	r30, r24
 9c4:	f9 07       	cpc	r31, r25
 9c6:	c0 f0       	brcs	.+48     	; 0x9f8 <__fp_cmp+0x46>
 9c8:	12 16       	cp	r1, r18
 9ca:	13 06       	cpc	r1, r19
 9cc:	e4 07       	cpc	r30, r20
 9ce:	f5 07       	cpc	r31, r21
 9d0:	98 f0       	brcs	.+38     	; 0x9f8 <__fp_cmp+0x46>
 9d2:	62 1b       	sub	r22, r18
 9d4:	73 0b       	sbc	r23, r19
 9d6:	84 0b       	sbc	r24, r20
 9d8:	95 0b       	sbc	r25, r21
 9da:	39 f4       	brne	.+14     	; 0x9ea <__fp_cmp+0x38>
 9dc:	0a 26       	eor	r0, r26
 9de:	61 f0       	breq	.+24     	; 0x9f8 <__fp_cmp+0x46>
 9e0:	23 2b       	or	r18, r19
 9e2:	24 2b       	or	r18, r20
 9e4:	25 2b       	or	r18, r21
 9e6:	21 f4       	brne	.+8      	; 0x9f0 <__fp_cmp+0x3e>
 9e8:	08 95       	ret
 9ea:	0a 26       	eor	r0, r26
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <__fp_cmp+0x3e>
 9ee:	a1 40       	sbci	r26, 0x01	; 1
 9f0:	a6 95       	lsr	r26
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	81 1d       	adc	r24, r1
 9f6:	81 1d       	adc	r24, r1
 9f8:	08 95       	ret

000009fa <__fp_inf>:
 9fa:	97 f9       	bld	r25, 7
 9fc:	9f 67       	ori	r25, 0x7F	; 127
 9fe:	80 e8       	ldi	r24, 0x80	; 128
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	08 95       	ret

00000a06 <__fp_nan>:
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	80 ec       	ldi	r24, 0xC0	; 192
 a0a:	08 95       	ret

00000a0c <__fp_powser>:
 a0c:	df 93       	push	r29
 a0e:	cf 93       	push	r28
 a10:	1f 93       	push	r17
 a12:	0f 93       	push	r16
 a14:	ff 92       	push	r15
 a16:	ef 92       	push	r14
 a18:	df 92       	push	r13
 a1a:	7b 01       	movw	r14, r22
 a1c:	8c 01       	movw	r16, r24
 a1e:	68 94       	set
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <__fp_powser+0x22>
 a22:	da 2e       	mov	r13, r26
 a24:	ef 01       	movw	r28, r30
 a26:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsf3x>
 a2a:	fe 01       	movw	r30, r28
 a2c:	e8 94       	clt
 a2e:	a5 91       	lpm	r26, Z+
 a30:	25 91       	lpm	r18, Z+
 a32:	35 91       	lpm	r19, Z+
 a34:	45 91       	lpm	r20, Z+
 a36:	55 91       	lpm	r21, Z+
 a38:	a6 f3       	brts	.-24     	; 0xa22 <__fp_powser+0x16>
 a3a:	ef 01       	movw	r28, r30
 a3c:	0e 94 5f 03 	call	0x6be	; 0x6be <__addsf3x>
 a40:	fe 01       	movw	r30, r28
 a42:	97 01       	movw	r18, r14
 a44:	a8 01       	movw	r20, r16
 a46:	da 94       	dec	r13
 a48:	69 f7       	brne	.-38     	; 0xa24 <__fp_powser+0x18>
 a4a:	df 90       	pop	r13
 a4c:	ef 90       	pop	r14
 a4e:	ff 90       	pop	r15
 a50:	0f 91       	pop	r16
 a52:	1f 91       	pop	r17
 a54:	cf 91       	pop	r28
 a56:	df 91       	pop	r29
 a58:	08 95       	ret

00000a5a <__fp_powsodd>:
 a5a:	9f 93       	push	r25
 a5c:	8f 93       	push	r24
 a5e:	7f 93       	push	r23
 a60:	6f 93       	push	r22
 a62:	ff 93       	push	r31
 a64:	ef 93       	push	r30
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 a6e:	ef 91       	pop	r30
 a70:	ff 91       	pop	r31
 a72:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_powser>
 a76:	2f 91       	pop	r18
 a78:	3f 91       	pop	r19
 a7a:	4f 91       	pop	r20
 a7c:	5f 91       	pop	r21
 a7e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__mulsf3>

00000a82 <__fp_pscA>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	09 06       	cpc	r0, r25
 a8e:	08 95       	ret

00000a90 <__fp_pscB>:
 a90:	00 24       	eor	r0, r0
 a92:	0a 94       	dec	r0
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	05 06       	cpc	r0, r21
 a9c:	08 95       	ret

00000a9e <__fp_round>:
 a9e:	09 2e       	mov	r0, r25
 aa0:	03 94       	inc	r0
 aa2:	00 0c       	add	r0, r0
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__fp_round+0xc>
 aa6:	88 23       	and	r24, r24
 aa8:	52 f0       	brmi	.+20     	; 0xabe <__fp_round+0x20>
 aaa:	bb 0f       	add	r27, r27
 aac:	40 f4       	brcc	.+16     	; 0xabe <__fp_round+0x20>
 aae:	bf 2b       	or	r27, r31
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0x18>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <__fp_round+0x20>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__fp_split3>:
 ac0:	57 fd       	sbrc	r21, 7
 ac2:	90 58       	subi	r25, 0x80	; 128
 ac4:	44 0f       	add	r20, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	59 f0       	breq	.+22     	; 0xae0 <__fp_splitA+0x10>
 aca:	5f 3f       	cpi	r21, 0xFF	; 255
 acc:	71 f0       	breq	.+28     	; 0xaea <__fp_splitA+0x1a>
 ace:	47 95       	ror	r20

00000ad0 <__fp_splitA>:
 ad0:	88 0f       	add	r24, r24
 ad2:	97 fb       	bst	r25, 7
 ad4:	99 1f       	adc	r25, r25
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <__fp_splitA+0x20>
 ad8:	9f 3f       	cpi	r25, 0xFF	; 255
 ada:	79 f0       	breq	.+30     	; 0xafa <__fp_splitA+0x2a>
 adc:	87 95       	ror	r24
 ade:	08 95       	ret
 ae0:	12 16       	cp	r1, r18
 ae2:	13 06       	cpc	r1, r19
 ae4:	14 06       	cpc	r1, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	f2 cf       	rjmp	.-28     	; 0xace <__fp_split3+0xe>
 aea:	46 95       	lsr	r20
 aec:	f1 df       	rcall	.-30     	; 0xad0 <__fp_splitA>
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <__fp_splitA+0x30>
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	99 1f       	adc	r25, r25
 af8:	f1 cf       	rjmp	.-30     	; 0xadc <__fp_splitA+0xc>
 afa:	86 95       	lsr	r24
 afc:	71 05       	cpc	r23, r1
 afe:	61 05       	cpc	r22, r1
 b00:	08 94       	sec
 b02:	08 95       	ret

00000b04 <__fp_zero>:
 b04:	e8 94       	clt

00000b06 <__fp_szero>:
 b06:	bb 27       	eor	r27, r27
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	cb 01       	movw	r24, r22
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__mulsf3>:
 b12:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsf3x>
 b16:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 b1a:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 b1e:	38 f0       	brcs	.+14     	; 0xb2e <__mulsf3+0x1c>
 b20:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__mulsf3+0x1c>
 b26:	95 23       	and	r25, r21
 b28:	11 f0       	breq	.+4      	; 0xb2e <__mulsf3+0x1c>
 b2a:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 b2e:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 b32:	11 24       	eor	r1, r1
 b34:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>

00000b38 <__mulsf3x>:
 b38:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 b3c:	70 f3       	brcs	.-36     	; 0xb1a <__mulsf3+0x8>

00000b3e <__mulsf3_pse>:
 b3e:	95 9f       	mul	r25, r21
 b40:	c1 f3       	breq	.-16     	; 0xb32 <__mulsf3+0x20>
 b42:	95 0f       	add	r25, r21
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	55 1f       	adc	r21, r21
 b48:	62 9f       	mul	r22, r18
 b4a:	f0 01       	movw	r30, r0
 b4c:	72 9f       	mul	r23, r18
 b4e:	bb 27       	eor	r27, r27
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	63 9f       	mul	r22, r19
 b56:	aa 27       	eor	r26, r26
 b58:	f0 0d       	add	r31, r0
 b5a:	b1 1d       	adc	r27, r1
 b5c:	aa 1f       	adc	r26, r26
 b5e:	64 9f       	mul	r22, r20
 b60:	66 27       	eor	r22, r22
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	66 1f       	adc	r22, r22
 b68:	82 9f       	mul	r24, r18
 b6a:	22 27       	eor	r18, r18
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	73 9f       	mul	r23, r19
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	62 1f       	adc	r22, r18
 b7a:	83 9f       	mul	r24, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	22 1f       	adc	r18, r18
 b82:	74 9f       	mul	r23, r20
 b84:	33 27       	eor	r19, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	23 1f       	adc	r18, r19
 b8c:	84 9f       	mul	r24, r20
 b8e:	60 0d       	add	r22, r0
 b90:	21 1d       	adc	r18, r1
 b92:	82 2f       	mov	r24, r18
 b94:	76 2f       	mov	r23, r22
 b96:	6a 2f       	mov	r22, r26
 b98:	11 24       	eor	r1, r1
 b9a:	9f 57       	subi	r25, 0x7F	; 127
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	9a f0       	brmi	.+38     	; 0xbc6 <__mulsf3_pse+0x88>
 ba0:	f1 f0       	breq	.+60     	; 0xbde <__mulsf3_pse+0xa0>
 ba2:	88 23       	and	r24, r24
 ba4:	4a f0       	brmi	.+18     	; 0xbb8 <__mulsf3_pse+0x7a>
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	bb 1f       	adc	r27, r27
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__mulsf3_pse+0x64>
 bb8:	9e 3f       	cpi	r25, 0xFE	; 254
 bba:	51 05       	cpc	r21, r1
 bbc:	80 f0       	brcs	.+32     	; 0xbde <__mulsf3_pse+0xa0>
 bbe:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 bc2:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 bc6:	5f 3f       	cpi	r21, 0xFF	; 255
 bc8:	e4 f3       	brlt	.-8      	; 0xbc2 <__mulsf3_pse+0x84>
 bca:	98 3e       	cpi	r25, 0xE8	; 232
 bcc:	d4 f3       	brlt	.-12     	; 0xbc2 <__mulsf3_pse+0x84>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b7 95       	ror	r27
 bd6:	f7 95       	ror	r31
 bd8:	e7 95       	ror	r30
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x90>
 bde:	fe 2b       	or	r31, r30
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret
 bec:	19 f4       	brne	.+6      	; 0xbf4 <__mulsf3_pse+0xb6>
 bee:	16 f4       	brtc	.+4      	; 0xbf4 <__mulsf3_pse+0xb6>
 bf0:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 bf4:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_mpack>

00000bf8 <sqrt>:
 bf8:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_splitA>
 bfc:	b8 f3       	brcs	.-18     	; 0xbec <__mulsf3_pse+0xae>
 bfe:	99 23       	and	r25, r25
 c00:	c9 f3       	breq	.-14     	; 0xbf4 <__mulsf3_pse+0xb6>
 c02:	b6 f3       	brts	.-20     	; 0xbf0 <__mulsf3_pse+0xb2>
 c04:	9f 57       	subi	r25, 0x7F	; 127
 c06:	55 0b       	sbc	r21, r21
 c08:	87 ff       	sbrs	r24, 7
 c0a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_norm2>
 c0e:	00 24       	eor	r0, r0
 c10:	a0 e6       	ldi	r26, 0x60	; 96
 c12:	40 ea       	ldi	r20, 0xA0	; 160
 c14:	90 01       	movw	r18, r0
 c16:	80 58       	subi	r24, 0x80	; 128
 c18:	56 95       	lsr	r21
 c1a:	97 95       	ror	r25
 c1c:	28 f4       	brcc	.+10     	; 0xc28 <sqrt+0x30>
 c1e:	80 5c       	subi	r24, 0xC0	; 192
 c20:	66 0f       	add	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	20 f0       	brcs	.+8      	; 0xc30 <sqrt+0x38>
 c28:	26 17       	cp	r18, r22
 c2a:	37 07       	cpc	r19, r23
 c2c:	48 07       	cpc	r20, r24
 c2e:	30 f4       	brcc	.+12     	; 0xc3c <sqrt+0x44>
 c30:	62 1b       	sub	r22, r18
 c32:	73 0b       	sbc	r23, r19
 c34:	84 0b       	sbc	r24, r20
 c36:	20 29       	or	r18, r0
 c38:	31 29       	or	r19, r1
 c3a:	4a 2b       	or	r20, r26
 c3c:	a6 95       	lsr	r26
 c3e:	17 94       	ror	r1
 c40:	07 94       	ror	r0
 c42:	20 25       	eor	r18, r0
 c44:	31 25       	eor	r19, r1
 c46:	4a 27       	eor	r20, r26
 c48:	58 f7       	brcc	.-42     	; 0xc20 <sqrt+0x28>
 c4a:	66 0f       	add	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	20 f0       	brcs	.+8      	; 0xc5a <sqrt+0x62>
 c52:	26 17       	cp	r18, r22
 c54:	37 07       	cpc	r19, r23
 c56:	48 07       	cpc	r20, r24
 c58:	30 f4       	brcc	.+12     	; 0xc66 <sqrt+0x6e>
 c5a:	62 0b       	sbc	r22, r18
 c5c:	73 0b       	sbc	r23, r19
 c5e:	84 0b       	sbc	r24, r20
 c60:	20 0d       	add	r18, r0
 c62:	31 1d       	adc	r19, r1
 c64:	41 1d       	adc	r20, r1
 c66:	a0 95       	com	r26
 c68:	81 f7       	brne	.-32     	; 0xc4a <sqrt+0x52>
 c6a:	b9 01       	movw	r22, r18
 c6c:	84 2f       	mov	r24, r20
 c6e:	91 58       	subi	r25, 0x81	; 129
 c70:	88 0f       	add	r24, r24
 c72:	96 95       	lsr	r25
 c74:	87 95       	ror	r24
 c76:	08 95       	ret

00000c78 <__fp_mpack>:
 c78:	9f 3f       	cpi	r25, 0xFF	; 255
 c7a:	31 f0       	breq	.+12     	; 0xc88 <__fp_mpack_finite+0xc>

00000c7c <__fp_mpack_finite>:
 c7c:	91 50       	subi	r25, 0x01	; 1
 c7e:	20 f4       	brcc	.+8      	; 0xc88 <__fp_mpack_finite+0xc>
 c80:	87 95       	ror	r24
 c82:	77 95       	ror	r23
 c84:	67 95       	ror	r22
 c86:	b7 95       	ror	r27
 c88:	88 0f       	add	r24, r24
 c8a:	91 1d       	adc	r25, r1
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <__fp_norm2>:
 c94:	91 50       	subi	r25, 0x01	; 1
 c96:	50 40       	sbci	r21, 0x00	; 0
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	d2 f7       	brpl	.-12     	; 0xc94 <__fp_norm2>
 ca0:	08 95       	ret

00000ca2 <__mulshisi3>:
 ca2:	b7 ff       	sbrs	r27, 7
 ca4:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__muluhisi3>

00000ca8 <__mulohisi3>:
 ca8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__muluhisi3>
 cac:	82 1b       	sub	r24, r18
 cae:	93 0b       	sbc	r25, r19
 cb0:	08 95       	ret

00000cb2 <__muluhisi3>:
 cb2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__umulhisi3>
 cb6:	a5 9f       	mul	r26, r21
 cb8:	90 0d       	add	r25, r0
 cba:	b4 9f       	mul	r27, r20
 cbc:	90 0d       	add	r25, r0
 cbe:	a4 9f       	mul	r26, r20
 cc0:	80 0d       	add	r24, r0
 cc2:	91 1d       	adc	r25, r1
 cc4:	11 24       	eor	r1, r1
 cc6:	08 95       	ret

00000cc8 <__umulhisi3>:
 cc8:	a2 9f       	mul	r26, r18
 cca:	b0 01       	movw	r22, r0
 ccc:	b3 9f       	mul	r27, r19
 cce:	c0 01       	movw	r24, r0
 cd0:	a3 9f       	mul	r26, r19
 cd2:	70 0d       	add	r23, r0
 cd4:	81 1d       	adc	r24, r1
 cd6:	11 24       	eor	r1, r1
 cd8:	91 1d       	adc	r25, r1
 cda:	b2 9f       	mul	r27, r18
 cdc:	70 0d       	add	r23, r0
 cde:	81 1d       	adc	r24, r1
 ce0:	11 24       	eor	r1, r1
 ce2:	91 1d       	adc	r25, r1
 ce4:	08 95       	ret

00000ce6 <__itoa_ncheck>:
 ce6:	bb 27       	eor	r27, r27
 ce8:	4a 30       	cpi	r20, 0x0A	; 10
 cea:	31 f4       	brne	.+12     	; 0xcf8 <__itoa_ncheck+0x12>
 cec:	99 23       	and	r25, r25
 cee:	22 f4       	brpl	.+8      	; 0xcf8 <__itoa_ncheck+0x12>
 cf0:	bd e2       	ldi	r27, 0x2D	; 45
 cf2:	90 95       	com	r25
 cf4:	81 95       	neg	r24
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__utoa_common>

00000cfc <__ultoa_ncheck>:
 cfc:	bb 27       	eor	r27, r27

00000cfe <__ultoa_common>:
 cfe:	fa 01       	movw	r30, r20
 d00:	a6 2f       	mov	r26, r22
 d02:	62 17       	cp	r22, r18
 d04:	71 05       	cpc	r23, r1
 d06:	81 05       	cpc	r24, r1
 d08:	91 05       	cpc	r25, r1
 d0a:	33 0b       	sbc	r19, r19
 d0c:	30 fb       	bst	r19, 0
 d0e:	66 f0       	brts	.+24     	; 0xd28 <__ultoa_common+0x2a>
 d10:	aa 27       	eor	r26, r26
 d12:	66 0f       	add	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	aa 1f       	adc	r26, r26
 d1c:	a2 17       	cp	r26, r18
 d1e:	10 f0       	brcs	.+4      	; 0xd24 <__ultoa_common+0x26>
 d20:	a2 1b       	sub	r26, r18
 d22:	63 95       	inc	r22
 d24:	38 50       	subi	r19, 0x08	; 8
 d26:	a9 f7       	brne	.-22     	; 0xd12 <__ultoa_common+0x14>
 d28:	a0 5d       	subi	r26, 0xD0	; 208
 d2a:	aa 33       	cpi	r26, 0x3A	; 58
 d2c:	08 f0       	brcs	.+2      	; 0xd30 <__ultoa_common+0x32>
 d2e:	a9 5d       	subi	r26, 0xD9	; 217
 d30:	a1 93       	st	Z+, r26
 d32:	36 f7       	brtc	.-52     	; 0xd00 <__ultoa_common+0x2>
 d34:	b1 11       	cpse	r27, r1
 d36:	b1 93       	st	Z+, r27
 d38:	10 82       	st	Z, r1
 d3a:	ca 01       	movw	r24, r20
 d3c:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <strrev>

00000d40 <__utoa_ncheck>:
 d40:	bb 27       	eor	r27, r27

00000d42 <__utoa_common>:
 d42:	fb 01       	movw	r30, r22
 d44:	55 27       	eor	r21, r21
 d46:	aa 27       	eor	r26, r26
 d48:	88 0f       	add	r24, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	aa 1f       	adc	r26, r26
 d4e:	a4 17       	cp	r26, r20
 d50:	10 f0       	brcs	.+4      	; 0xd56 <__utoa_common+0x14>
 d52:	a4 1b       	sub	r26, r20
 d54:	83 95       	inc	r24
 d56:	50 51       	subi	r21, 0x10	; 16
 d58:	b9 f7       	brne	.-18     	; 0xd48 <__utoa_common+0x6>
 d5a:	a0 5d       	subi	r26, 0xD0	; 208
 d5c:	aa 33       	cpi	r26, 0x3A	; 58
 d5e:	08 f0       	brcs	.+2      	; 0xd62 <__utoa_common+0x20>
 d60:	a9 5d       	subi	r26, 0xD9	; 217
 d62:	a1 93       	st	Z+, r26
 d64:	00 97       	sbiw	r24, 0x00	; 0
 d66:	79 f7       	brne	.-34     	; 0xd46 <__utoa_common+0x4>
 d68:	b1 11       	cpse	r27, r1
 d6a:	b1 93       	st	Z+, r27
 d6c:	11 92       	st	Z+, r1
 d6e:	cb 01       	movw	r24, r22
 d70:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <strrev>

00000d74 <strrev>:
 d74:	dc 01       	movw	r26, r24
 d76:	fc 01       	movw	r30, r24
 d78:	67 2f       	mov	r22, r23
 d7a:	71 91       	ld	r23, Z+
 d7c:	77 23       	and	r23, r23
 d7e:	e1 f7       	brne	.-8      	; 0xd78 <strrev+0x4>
 d80:	32 97       	sbiw	r30, 0x02	; 2
 d82:	04 c0       	rjmp	.+8      	; 0xd8c <strrev+0x18>
 d84:	7c 91       	ld	r23, X
 d86:	6d 93       	st	X+, r22
 d88:	70 83       	st	Z, r23
 d8a:	62 91       	ld	r22, -Z
 d8c:	ae 17       	cp	r26, r30
 d8e:	bf 07       	cpc	r27, r31
 d90:	c8 f3       	brcs	.-14     	; 0xd84 <strrev+0x10>
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>


TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800100  00000cee  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800262  00800262  00000ee4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f0  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cde  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1d  00000000  00000000  000032ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00003d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000771  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	12 e0       	ldi	r17, 0x02	; 2
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	ee ee       	ldi	r30, 0xEE	; 238
 122:	fc e0       	ldi	r31, 0x0C	; 12
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	a2 36       	cpi	r26, 0x62	; 98
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	a2 e6       	ldi	r26, 0x62	; 98
 134:	b2 e0       	ldi	r27, 0x02	; 2
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	ac 38       	cpi	r26, 0x8C	; 140
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
 144:	0c 94 75 06 	jmp	0xcea	; 0xcea <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.section ".text"			//student comment here
.global Mega328P_Init
Mega328P_Init:
		//***********************************************
		//initialize PB0(R*W),PB1(RS),PB2(E) as fixed cleared outputs
		ldi	r16,0x07		//student comment here
 14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//student comment here
 14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//student comment here
 150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//student comment here
 152:	05 b9       	out	0x05, r16	; 5
		//***********************************************
		//initialize UART, 8bits, no parity, 1 stop, 9600
		out	U2X0,r16		//student comment here
 154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//student comment here
 156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//student comment here
 158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//student comment here
 15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		sts	UBRR0L,r16		//student comment here
 15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		ldi	r16,24			//student comment here
 162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//student comment here
 164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		ldi	r16,6			//student comment here
 168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//student comment here
 16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
		//************************************************
		//initialize ADC
		ldi r16,0x87		//student comment here
 16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//student comment here
 170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		ldi r16,0x40		//student comment here
 174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//student comment here
 176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		ldi r16,0			//student comment here
 17a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//student comment here
 17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
		ldi r16,0xFE		//student comment here
 180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//student comment here
 182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
		ldi r16,0xFF		//student comment here
 186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//student comment here
 188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
		//************************************************
		ret					//student comment here
 18c:	08 95       	ret

0000018e <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//student comment here
 18e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		; Initialize PD0 - PD7...
 192:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		; as outputs.
 194:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 196:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <DATA>
	out		PORTD,r16		//student comment here
 19a:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//student comment here
 19c:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//student comment here
 19e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//student comment here
 1a4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 1a6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//student comment here
 1ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1b0:	08 95       	ret

000001b2 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		//student comment here
 1b2:	0a ef       	ldi	r16, 0xFA	; 250

000001b4 <D0>:
D0:	ldi		r17,0xFF		//student comment here
 1b4:	1f ef       	ldi	r17, 0xFF	; 255

000001b6 <D1>:
D1:	dec		r17				//student comment here
 1b6:	1a 95       	dec	r17
	brne	D1				//student comment here
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <D1>
	dec		r16				//student comment here
 1ba:	0a 95       	dec	r16
	brne	D0				//student comment here
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <D0>
	ret						//student comment here
 1be:	08 95       	ret

000001c0 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//student comment here
 1c0:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		//student comment here
 1c4:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 1c6:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 1c8:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <DATA>
	out		PORTD,r16		//student comment here
 1cc:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//student comment here
 1ce:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//student comment here
 1d0:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//student comment here
 1d6:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 1d8:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//student comment here
 1de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1e2:	08 95       	ret

000001e4 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//student comment here
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0x00		//student comment here
 1e8:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//student comment here
 1ea:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//student comment here
 1ec:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//student comment here
 1ee:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//student comment here
 1f0:	00 93 6b 02 	sts	0x026B, r16	; 0x80026b <DATA>
	out		PORTB,0			//student comment here
 1f4:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//student comment here
 1f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1fa:	08 95       	ret

000001fc <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//student comment here
 1fc:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//student comment here
 1fe:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//student comment here
 200:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//student comment here
 202:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	ret							//student comment here
 206:	08 95       	ret

00000208 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//student comment here
 208:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//student comment here
 20a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	ret							//student comment here
 20e:	08 95       	ret

00000210 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//student comment here
 210:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r16,RXC0			//student comment here
 214:	07 ff       	sbrs	r16, 7
	ret							//student comment here
 216:	08 95       	ret
	lds		r16,UDR0			//student comment here
 218:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	rjmp	UART_Clear			//student comment here
 21c:	f9 cf       	rjmp	.-14     	; 0x210 <UART_Clear>

0000021e <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//student comment here
 21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r16,RXC0			//student comment here
 222:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//student comment here
 224:	fc cf       	rjmp	.-8      	; 0x21e <UART_Get>
	lds		r16,UDR0			//student comment here
 226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	sts		ASCII,r16			//student comment here
 22a:	00 93 6d 02 	sts	0x026D, r16	; 0x80026d <ASCII>
	ret							//student comment here
 22e:	08 95       	ret

00000230 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//student comment here
 230:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	sbrs	r17,UDRE0			//student comment here
 234:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//student comment here
 236:	fc cf       	rjmp	.-8      	; 0x230 <UART_Put>
	lds		r16,ASCII			//student comment here
 238:	00 91 6d 02 	lds	r16, 0x026D	; 0x80026d <ASCII>
	sts		UDR0,r16			//student comment here
 23c:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	ret							//student comment here
 240:	08 95       	ret

00000242 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			//student comment here
 242:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//student comment here
 244:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000248 <A2V1>:
A2V1:	lds		r16,ADCSRA			//student comment here
 248:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbrc	r16,ADSC			//student comment here
 24c:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//student comment here
 24e:	fc cf       	rjmp	.-8      	; 0x248 <A2V1>
		lds		r16,ADCL			//student comment here
 250:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		sts		LADC,r16			//student comment here
 254:	00 93 85 02 	sts	0x0285, r16	; 0x800285 <LADC>
		lds		r16,ADCH			//student comment here
 258:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		sts		HADC,r16			//student comment here
 25c:	00 93 6c 02 	sts	0x026C, r16	; 0x80026c <HADC>
		ret							//student comment here
 260:	08 95       	ret

00000262 <EEPROM_Write>:


.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 262:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 264:	fe cf       	rjmp	.-4      	; 0x262 <EEPROM_Write>
		ldi		r18,0x00			; Set up address (r18:r17) in address register
 266:	20 e0       	ldi	r18, 0x00	; 0
		;ldi		r17,0x05 
		;ldi		r16,'F'				; Set up data in r16    
		ldi		r17,EEPROM_Address 
 268:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,EEPROM_Data		; Set up data in r16    
 26a:	06 e4       	ldi	r16, 0x46	; 70
		out     EEARH, r18      
 26c:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 26e:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 270:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 272:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 274:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 276:	08 95       	ret

00000278 <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 278:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 27a:	fe cf       	rjmp	.-4      	; 0x278 <EEPROM_Read>
		ldi		r18,0x00		; Set up address (r18:r17) in EEPROM address register
 27c:	20 e0       	ldi	r18, 0x00	; 0
		;ldi		r17,0x05
		ldi		r17,EEPROM_Address
 27e:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,0x00   
 280:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 282:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 284:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 286:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 288:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 28a:	00 93 6d 02 	sts	0x026D, r16	; 0x80026d <ASCII>
		ret
 28e:	08 95       	ret

00000290 <return_string>:
   unsigned long				long_num,
	char							exp_base,
	char							exp,
	char							ch[]
	)
   {
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	c8 2f       	mov	r28, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	ba 01       	movw	r22, r20
 2a2:	12 2f       	mov	r17, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 2a4:	a7 01       	movw	r20, r14
 2a6:	4f 5f       	subi	r20, 0xFF	; 255
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	2a e0       	ldi	r18, 0x0A	; 10
 2ac:	0e 94 29 06 	call	0xc52	; 0xc52 <__ultoa_ncheck>
   //if you use Imagecraft C Compiler change ultoa to ltoa
   //convert long to char in base 10 (note: this call takes about as much time
   //as the rest of the routine!!
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;
 2b0:	f7 01       	movw	r30, r14
 2b2:	c0 83       	st	Z, r28

   //get size of array
   while (ch[end_of_array] != '\0')
 2b4:	cc 23       	and	r28, r28
 2b6:	c9 f0       	breq	.+50     	; 0x2ea <return_string+0x5a>
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <return_string+0x2e>
   	{
      end_of_array++;
 2bc:	98 2f       	mov	r25, r24
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 0f       	add	r24, r25
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
 2c2:	c8 2f       	mov	r28, r24
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	f7 01       	movw	r30, r14
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	20 81       	ld	r18, Z
 2ce:	21 11       	cpse	r18, r1
 2d0:	f5 cf       	rjmp	.-22     	; 0x2bc <return_string+0x2c>
   	{
      end_of_array++;
      }

   array_count = end_of_array - 6;
 2d2:	95 50       	subi	r25, 0x05	; 5
   n = end_of_array;

   //move 5 digits over one to the right to make room for the '.'
	while (n > array_count)
 2d4:	98 17       	cp	r25, r24
 2d6:	68 f4       	brcc	.+26     	; 0x2f2 <return_string+0x62>
	  	{
	 	ch[n+1] = ch[n];
 2d8:	f7 01       	movw	r30, r14
 2da:	e8 0f       	add	r30, r24
 2dc:	f1 1d       	adc	r31, r1
 2de:	20 81       	ld	r18, Z
 2e0:	21 83       	std	Z+1, r18	; 0x01
	  	n--;
 2e2:	81 50       	subi	r24, 0x01	; 1

   array_count = end_of_array - 6;
   n = end_of_array;

   //move 5 digits over one to the right to make room for the '.'
	while (n > array_count)
 2e4:	98 13       	cpse	r25, r24
 2e6:	f8 cf       	rjmp	.-16     	; 0x2d8 <return_string+0x48>
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <return_string+0x64>
	ultoa(long_num, &ch[1], 10);
	//add in sign
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
	char							exp,
	char							ch[]
	)
   {
   unsigned char				array_count;
   unsigned char				end_of_array = 0;
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <return_string+0x64>
	ch[0] = sign;

   //get size of array
   while (ch[end_of_array] != '\0')
   	{
      end_of_array++;
 2f2:	98 2f       	mov	r25, r24
	while (n > array_count)
	  	{
	 	ch[n+1] = ch[n];
	  	n--;
	  	}
	ch[n + 1] = '.';
 2f4:	f7 01       	movw	r30, r14
 2f6:	e9 0f       	add	r30, r25
 2f8:	f1 1d       	adc	r31, r1
 2fa:	8e e2       	ldi	r24, 0x2E	; 46
 2fc:	81 83       	std	Z+1, r24	; 0x01

   if (exp_base == 0)
 2fe:	11 23       	and	r17, r17
 300:	71 f0       	breq	.+28     	; 0x31e <return_string+0x8e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 302:	be 01       	movw	r22, r28
 304:	6e 5f       	subi	r22, 0xFE	; 254
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	6e 0d       	add	r22, r14
 30a:	7f 1d       	adc	r23, r15
 30c:	4a e0       	ldi	r20, 0x0A	; 10
 30e:	80 2f       	mov	r24, r16
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__itoa_ncheck>
   	{
      //get exp value
      itoa((int)exp, &ch[end_of_array + 2], 10);

      #if USE_BASE_2_EXP == 1
			ch[end_of_array+1] = 't';
 316:	ce 0d       	add	r28, r14
 318:	df 1d       	adc	r29, r15
 31a:	84 e7       	ldi	r24, 0x74	; 116
 31c:	89 83       	std	Y+1, r24	; 0x01
	      ch[end_of_array+1] = 'e';
   	#endif

      return;
      }
	}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	08 95       	ret

0000032c <ftoa>:
void												ftoa
	(
   float							fp,
   char							ch[]
   )
   {
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	4b 01       	movw	r8, r22
 33e:	5c 01       	movw	r10, r24
 340:	7a 01       	movw	r14, r20
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0

   //1] set n to 0
   n = 0;

   //2] set F to 0
   fixed_point = 0;
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	ba 01       	movw	r22, r20

	while (n < SIZE_OF_MANTISSA)
   	{
   	//3] read nth bit counting from LSB of floating point number, if 1,
      //   add 1 to F
		if (((*fake_fp_pointer >> n) & 0x01) == 1)
 34c:	95 01       	movw	r18, r10
 34e:	84 01       	movw	r16, r8
 350:	08 2e       	mov	r0, r24
 352:	04 c0       	rjmp	.+8      	; 0x35c <ftoa+0x30>
 354:	35 95       	asr	r19
 356:	27 95       	ror	r18
 358:	17 95       	ror	r17
 35a:	07 95       	ror	r16
 35c:	0a 94       	dec	r0
 35e:	d2 f7       	brpl	.-12     	; 0x354 <ftoa+0x28>
 360:	00 ff       	sbrs	r16, 0
 362:	04 c0       	rjmp	.+8      	; 0x36c <ftoa+0x40>
   		{
      	fixed_point += 100000;
 364:	40 56       	subi	r20, 0x60	; 96
 366:	59 47       	sbci	r21, 0x79	; 121
 368:	6e 4f       	sbci	r22, 0xFE	; 254
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
      	}

  	 	//4] divide F by 2
   	fixed_point = fixed_point >> 1;
 36c:	76 95       	lsr	r23
 36e:	67 95       	ror	r22
 370:	57 95       	ror	r21
 372:	47 95       	ror	r20
 374:	01 96       	adiw	r24, 0x01	; 1
   n = 0;

   //2] set F to 0
   fixed_point = 0;

	while (n < SIZE_OF_MANTISSA)
 376:	87 31       	cpi	r24, 0x17	; 23
 378:	91 05       	cpc	r25, r1
 37a:	41 f7       	brne	.-48     	; 0x34c <ftoa+0x20>
      //5] Increment n
      n++;
      }

 	//there is an extra 1 that is dropped by floating point
   fixed_point += 100000;
 37c:	40 56       	subi	r20, 0x60	; 96
 37e:	59 47       	sbci	r21, 0x79	; 121
 380:	6e 4f       	sbci	r22, 0xFE	; 254
 382:	7f 4f       	sbci	r23, 0xFF	; 255

   //now convert the exponent to signed type
   exponent = (unsigned char)(*fake_fp_pointer >> BITS_UNTIL_EXPONENT)  - 127;
 384:	95 01       	movw	r18, r10
 386:	84 01       	movw	r16, r8
 388:	0f 2e       	mov	r0, r31
 38a:	f7 e1       	ldi	r31, 0x17	; 23
 38c:	35 95       	asr	r19
 38e:	27 95       	ror	r18
 390:	17 95       	ror	r17
 392:	07 95       	ror	r16
 394:	fa 95       	dec	r31
 396:	d1 f7       	brne	.-12     	; 0x38c <ftoa+0x60>
 398:	f0 2d       	mov	r31, r0
 39a:	0f 57       	subi	r16, 0x7F	; 127

   //finally set up sign of mantissa if applicable
   if (((*fake_fp_pointer >> BITS_UNTIL_SIGN) & 0x01) == 1)
 39c:	bb 20       	and	r11, r11
 39e:	14 f0       	brlt	.+4      	; 0x3a4 <ftoa+0x78>
   	{
     	sign = '-';
      }
   else
   	{
      sign = '+';
 3a0:	eb e2       	ldi	r30, 0x2B	; 43
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <ftoa+0x7a>
   exponent = (unsigned char)(*fake_fp_pointer >> BITS_UNTIL_EXPONENT)  - 127;

   //finally set up sign of mantissa if applicable
   if (((*fake_fp_pointer >> BITS_UNTIL_SIGN) & 0x01) == 1)
   	{
     	sign = '-';
 3a4:	ed e2       	ldi	r30, 0x2D	; 45
      sign = '+';
      }

   //convert to a "normal" number if the number is smallish
	#if USE_E_ONLY_WHEN_NEEDED == 1
	if (exponent  >= 0 && exponent <= 10)
 3a6:	0b 30       	cpi	r16, 0x0B	; 11
 3a8:	98 f4       	brcc	.+38     	; 0x3d0 <ftoa+0xa4>
	   {
	   fixed_point *= 1 << exponent;
		return_string(sign, fixed_point, 0, 0, ch);
 3aa:	a1 e0       	ldi	r26, 0x01	; 1
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <ftoa+0x88>
 3b0:	aa 0f       	add	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	0a 95       	dec	r16
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <ftoa+0x84>
 3b8:	9a 01       	movw	r18, r20
 3ba:	ab 01       	movw	r20, r22
 3bc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__mulshisi3>
 3c0:	ab 01       	movw	r20, r22
 3c2:	bc 01       	movw	r22, r24
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	8e 2f       	mov	r24, r30
 3ca:	0e 94 48 01 	call	0x290	; 0x290 <return_string>
      return;
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <ftoa+0xac>
      return;
		}
   #endif

   #if USE_BASE_2_EXP == 1
  	return_string(sign, fixed_point, 2, exponent, ch);
 3d0:	22 e0       	ldi	r18, 0x02	; 2
 3d2:	8e 2f       	mov	r24, r30
 3d4:	0e 94 48 01 	call	0x290	; 0x290 <return_string>

   return_string(sign, fixed_point, 10, exponent_10x, ch);
	#endif
   
   return;
   }
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	bf 90       	pop	r11
 3e2:	af 90       	pop	r10
 3e4:	9f 90       	pop	r9
 3e6:	8f 90       	pop	r8
 3e8:	08 95       	ret

000003ea <UART_Puts>:
	UART_Puts("\r\n");
	*/
}

void USART_Init(void)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
 3f0:	98 81       	ld	r25, Y
 3f2:	99 23       	and	r25, r25
 3f4:	41 f0       	breq	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ASCII>
 3fc:	0e 94 18 01 	call	0x230	; 0x230 <UART_Put>
 400:	99 91       	ld	r25, Y+
 402:	91 11       	cpse	r25, r1
 404:	f9 cf       	rjmp	.-14     	; 0x3f8 <UART_Puts+0xe>
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <LCD_Puts>:
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ec 01       	movw	r28, r24
 412:	98 81       	ld	r25, Y
 414:	99 23       	and	r25, r25
 416:	41 f0       	breq	.+16     	; 0x428 <LCD_Puts+0x1c>
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <DATA>
 41e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Write_Data>
 422:	99 91       	ld	r25, Y+
 424:	91 11       	cpse	r25, r1
 426:	f9 cf       	rjmp	.-14     	; 0x41a <LCD_Puts+0xe>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <Banner>:
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 43e:	88 ed       	ldi	r24, 0xD8	; 216
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 446:	08 95       	ret

00000448 <HELP>:
 448:	82 ee       	ldi	r24, 0xE2	; 226
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 450:	08 95       	ret

00000452 <LCD>:
 452:	cf 93       	push	r28
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 45a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 45e:	84 e3       	ldi	r24, 0x34	; 52
 460:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 464:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 46e:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 478:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 482:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <DATA>
 48c:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_Puts>
 498:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
 49c:	81 11       	cpse	r24, r1
 49e:	12 c0       	rjmp	.+36     	; 0x4c4 <LCD+0x72>
 4a0:	c8 e1       	ldi	r28, 0x18	; 24
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	89 e6       	ldi	r24, 0x69	; 105
 4a6:	98 e1       	ldi	r25, 0x18	; 24
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <LCD+0x56>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD+0x60>
 4b2:	00 00       	nop
 4b4:	c0 93 6b 02 	sts	0x026B, r28	; 0x80026b <DATA>
 4b8:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 4bc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
 4c0:	88 23       	and	r24, r24
 4c2:	79 f3       	breq	.-34     	; 0x4a2 <LCD+0x50>
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <ADC>:
 4c8:	8f 92       	push	r8
 4ca:	9f 92       	push	r9
 4cc:	af 92       	push	r10
 4ce:	bf 92       	push	r11
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0e 94 21 01 	call	0x242	; 0x242 <ADC_Get>
 4dc:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <HADC>
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e8       	ldi	r20, 0x80	; 128
 4f0:	53 e4       	ldi	r21, 0x43	; 67
 4f2:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 4f6:	6b 01       	movw	r12, r22
 4f8:	7c 01       	movw	r14, r24
 4fa:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <LADC>
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__floatunsisf>
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	c7 01       	movw	r24, r14
 50e:	b6 01       	movw	r22, r12
 510:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3>
 514:	0e 94 46 04 	call	0x88c	; 0x88c <__fixsfsi>
 518:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <Acc+0x1>
 51c:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <Acc>
 520:	07 2e       	mov	r0, r23
 522:	00 0c       	add	r0, r0
 524:	88 0b       	sbc	r24, r24
 526:	99 0b       	sbc	r25, r25
 528:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 52c:	6b 01       	movw	r12, r22
 52e:	7c 01       	movw	r14, r24
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e4       	ldi	r19, 0x40	; 64
 534:	4c e1       	ldi	r20, 0x1C	; 28
 536:	56 e4       	ldi	r21, 0x46	; 70
 538:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
 540:	a7 01       	movw	r20, r14
 542:	96 01       	movw	r18, r12
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e8       	ldi	r24, 0x80	; 128
 54a:	94 e4       	ldi	r25, 0x44	; 68
 54c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__subsf3>
 550:	9b 01       	movw	r18, r22
 552:	ac 01       	movw	r20, r24
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__divsf3>
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e4       	ldi	r19, 0x40	; 64
 560:	4c e1       	ldi	r20, 0x1C	; 28
 562:	56 e4       	ldi	r21, 0x46	; 70
 564:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__divsf3>
 568:	0e 94 12 05 	call	0xa24	; 0xa24 <log>
 56c:	23 e3       	ldi	r18, 0x33	; 51
 56e:	33 e1       	ldi	r19, 0x13	; 19
 570:	45 e9       	ldi	r20, 0x95	; 149
 572:	53 e4       	ldi	r21, 0x43	; 67
 574:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 ee       	ldi	r19, 0xE0	; 224
 57c:	46 e7       	ldi	r20, 0x76	; 118
 57e:	55 e4       	ldi	r21, 0x45	; 69
 580:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3>
 584:	9b 01       	movw	r18, r22
 586:	ac 01       	movw	r20, r24
 588:	64 ee       	ldi	r22, 0xE4	; 228
 58a:	72 ec       	ldi	r23, 0xC2	; 194
 58c:	8f e8       	ldi	r24, 0x8F	; 143
 58e:	99 e4       	ldi	r25, 0x49	; 73
 590:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__divsf3>
 594:	23 e3       	ldi	r18, 0x33	; 51
 596:	33 e9       	ldi	r19, 0x93	; 147
 598:	48 e8       	ldi	r20, 0x88	; 136
 59a:	53 e4       	ldi	r21, 0x43	; 67
 59c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__subsf3>
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e1       	ldi	r20, 0x10	; 16
 5a6:	51 e4       	ldi	r21, 0x41	; 65
 5a8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	40 ea       	ldi	r20, 0xA0	; 160
 5b2:	50 e4       	ldi	r21, 0x40	; 64
 5b4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__divsf3>
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	52 e4       	ldi	r21, 0x42	; 66
 5c0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3>
 5c4:	4e e6       	ldi	r20, 0x6E	; 110
 5c6:	52 e0       	ldi	r21, 0x02	; 2
 5c8:	0e 94 96 01 	call	0x32c	; 0x32c <ftoa>
 5cc:	8e e6       	ldi	r24, 0x6E	; 110
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	9f 90       	pop	r9
 5e2:	8f 90       	pop	r8
 5e4:	08 95       	ret

000005e6 <EEPROM>:
 5e6:	81 e4       	ldi	r24, 0x41	; 65
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 5ee:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 5f2:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ASCII>
 5f6:	87 37       	cpi	r24, 0x77	; 119
 5f8:	f9 f4       	brne	.+62     	; 0x638 <EEPROM+0x52>
 5fa:	8d e5       	ldi	r24, 0x5D	; 93
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 602:	8a e5       	ldi	r24, 0x5A	; 90
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 60a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 60e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ASCII>
 612:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
 616:	8a e7       	ldi	r24, 0x7A	; 122
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 61e:	8a e5       	ldi	r24, 0x5A	; 90
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 626:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 62a:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ASCII>
 62e:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
 632:	0e 94 31 01 	call	0x262	; 0x262 <EEPROM_Write>
 636:	08 95       	ret
 638:	82 37       	cpi	r24, 0x72	; 114
 63a:	d1 f4       	brne	.+52     	; 0x670 <EEPROM+0x8a>
 63c:	8a e5       	ldi	r24, 0x5A	; 90
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 644:	82 e9       	ldi	r24, 0x92	; 146
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 64c:	8a e5       	ldi	r24, 0x5A	; 90
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 654:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 658:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ASCII>
 65c:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
 660:	0e 94 3c 01 	call	0x278	; 0x278 <EEPROM_Read>
 664:	0e 94 18 01 	call	0x230	; 0x230 <UART_Put>
 668:	8a e5       	ldi	r24, 0x5A	; 90
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
 670:	08 95       	ret

00000672 <Command>:
}
*/

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 672:	82 ee       	ldi	r24, 0xE2	; 226
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
	ASCII = '\0';						
 67a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 67e:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 682:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ASCII>
 686:	88 23       	and	r24, r24
 688:	d1 f3       	breq	.-12     	; 0x67e <Command+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 68a:	85 36       	cpi	r24, 0x65	; 101
 68c:	79 f0       	breq	.+30     	; 0x6ac <Command+0x3a>
 68e:	18 f4       	brcc	.+6      	; 0x696 <Command+0x24>
 690:	81 36       	cpi	r24, 0x61	; 97
 692:	49 f0       	breq	.+18     	; 0x6a6 <Command+0x34>
 694:	0e c0       	rjmp	.+28     	; 0x6b2 <Command+0x40>
 696:	8c 36       	cpi	r24, 0x6C	; 108
 698:	19 f0       	breq	.+6      	; 0x6a0 <Command+0x2e>
 69a:	85 37       	cpi	r24, 0x75	; 117
 69c:	81 f0       	breq	.+32     	; 0x6be <Command+0x4c>
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <Command+0x40>
	{
		case 'L' | 'l': LCD();
 6a0:	0e 94 29 02 	call	0x452	; 0x452 <LCD>
		break;
 6a4:	08 95       	ret
		case 'A' | 'a': ADC();
 6a6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <ADC>
		break;
 6aa:	08 95       	ret
		case 'E' | 'e': EEPROM();
 6ac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <EEPROM>
		break;
 6b0:	08 95       	ret
		case 'U' | 'u': USART_Init();
		break;
		default:
		UART_Puts(MS5);
 6b2:	89 eb       	ldi	r24, 0xB9	; 185
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_Puts>
		HELP();
 6ba:	0e 94 24 02 	call	0x448	; 0x448 <HELP>
 6be:	08 95       	ret

000006c0 <main>:
	}
}

int main(void)
{
	Mega328P_Init();
 6c0:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
	Banner();
 6c4:	0e 94 17 02 	call	0x42e	; 0x42e <Banner>
	while (1)
	{
		Command();				//infinite command loop
 6c8:	0e 94 39 03 	call	0x672	; 0x672 <Command>
 6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <main+0x8>

000006ce <__subsf3>:
 6ce:	50 58       	subi	r21, 0x80	; 128

000006d0 <__addsf3>:
 6d0:	bb 27       	eor	r27, r27
 6d2:	aa 27       	eor	r26, r26
 6d4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__addsf3x>
 6d8:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_round>
 6dc:	0e 94 c2 04 	call	0x984	; 0x984 <__fp_pscA>
 6e0:	38 f0       	brcs	.+14     	; 0x6f0 <__addsf3+0x20>
 6e2:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_pscB>
 6e6:	20 f0       	brcs	.+8      	; 0x6f0 <__addsf3+0x20>
 6e8:	39 f4       	brne	.+14     	; 0x6f8 <__addsf3+0x28>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	19 f4       	brne	.+6      	; 0x6f4 <__addsf3+0x24>
 6ee:	26 f4       	brtc	.+8      	; 0x6f8 <__addsf3+0x28>
 6f0:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_nan>
 6f4:	0e f4       	brtc	.+2      	; 0x6f8 <__addsf3+0x28>
 6f6:	e0 95       	com	r30
 6f8:	e7 fb       	bst	r30, 7
 6fa:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>

000006fe <__addsf3x>:
 6fe:	e9 2f       	mov	r30, r25
 700:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_split3>
 704:	58 f3       	brcs	.-42     	; 0x6dc <__addsf3+0xc>
 706:	ba 17       	cp	r27, r26
 708:	62 07       	cpc	r22, r18
 70a:	73 07       	cpc	r23, r19
 70c:	84 07       	cpc	r24, r20
 70e:	95 07       	cpc	r25, r21
 710:	20 f0       	brcs	.+8      	; 0x71a <__addsf3x+0x1c>
 712:	79 f4       	brne	.+30     	; 0x732 <__addsf3x+0x34>
 714:	a6 f5       	brtc	.+104    	; 0x77e <__addsf3x+0x80>
 716:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_zero>
 71a:	0e f4       	brtc	.+2      	; 0x71e <__addsf3x+0x20>
 71c:	e0 95       	com	r30
 71e:	0b 2e       	mov	r0, r27
 720:	ba 2f       	mov	r27, r26
 722:	a0 2d       	mov	r26, r0
 724:	0b 01       	movw	r0, r22
 726:	b9 01       	movw	r22, r18
 728:	90 01       	movw	r18, r0
 72a:	0c 01       	movw	r0, r24
 72c:	ca 01       	movw	r24, r20
 72e:	a0 01       	movw	r20, r0
 730:	11 24       	eor	r1, r1
 732:	ff 27       	eor	r31, r31
 734:	59 1b       	sub	r21, r25
 736:	99 f0       	breq	.+38     	; 0x75e <__addsf3x+0x60>
 738:	59 3f       	cpi	r21, 0xF9	; 249
 73a:	50 f4       	brcc	.+20     	; 0x750 <__addsf3x+0x52>
 73c:	50 3e       	cpi	r21, 0xE0	; 224
 73e:	68 f1       	brcs	.+90     	; 0x79a <__addsf3x+0x9c>
 740:	1a 16       	cp	r1, r26
 742:	f0 40       	sbci	r31, 0x00	; 0
 744:	a2 2f       	mov	r26, r18
 746:	23 2f       	mov	r18, r19
 748:	34 2f       	mov	r19, r20
 74a:	44 27       	eor	r20, r20
 74c:	58 5f       	subi	r21, 0xF8	; 248
 74e:	f3 cf       	rjmp	.-26     	; 0x736 <__addsf3x+0x38>
 750:	46 95       	lsr	r20
 752:	37 95       	ror	r19
 754:	27 95       	ror	r18
 756:	a7 95       	ror	r26
 758:	f0 40       	sbci	r31, 0x00	; 0
 75a:	53 95       	inc	r21
 75c:	c9 f7       	brne	.-14     	; 0x750 <__addsf3x+0x52>
 75e:	7e f4       	brtc	.+30     	; 0x77e <__addsf3x+0x80>
 760:	1f 16       	cp	r1, r31
 762:	ba 0b       	sbc	r27, r26
 764:	62 0b       	sbc	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	ba f0       	brmi	.+46     	; 0x79a <__addsf3x+0x9c>
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	a1 f0       	breq	.+40     	; 0x798 <__addsf3x+0x9a>
 770:	ff 0f       	add	r31, r31
 772:	bb 1f       	adc	r27, r27
 774:	66 1f       	adc	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	c2 f7       	brpl	.-16     	; 0x76c <__addsf3x+0x6e>
 77c:	0e c0       	rjmp	.+28     	; 0x79a <__addsf3x+0x9c>
 77e:	ba 0f       	add	r27, r26
 780:	62 1f       	adc	r22, r18
 782:	73 1f       	adc	r23, r19
 784:	84 1f       	adc	r24, r20
 786:	48 f4       	brcc	.+18     	; 0x79a <__addsf3x+0x9c>
 788:	87 95       	ror	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f7 95       	ror	r31
 792:	9e 3f       	cpi	r25, 0xFE	; 254
 794:	08 f0       	brcs	.+2      	; 0x798 <__addsf3x+0x9a>
 796:	b0 cf       	rjmp	.-160    	; 0x6f8 <__addsf3+0x28>
 798:	93 95       	inc	r25
 79a:	88 0f       	add	r24, r24
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <__addsf3x+0xa2>
 79e:	99 27       	eor	r25, r25
 7a0:	ee 0f       	add	r30, r30
 7a2:	97 95       	ror	r25
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret

000007a8 <__divsf3>:
 7a8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3x>
 7ac:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_round>
 7b0:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_pscB>
 7b4:	58 f0       	brcs	.+22     	; 0x7cc <__divsf3+0x24>
 7b6:	0e 94 c2 04 	call	0x984	; 0x984 <__fp_pscA>
 7ba:	40 f0       	brcs	.+16     	; 0x7cc <__divsf3+0x24>
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <__divsf3+0x20>
 7be:	5f 3f       	cpi	r21, 0xFF	; 255
 7c0:	29 f0       	breq	.+10     	; 0x7cc <__divsf3+0x24>
 7c2:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>
 7c6:	51 11       	cpse	r21, r1
 7c8:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_szero>
 7cc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_nan>

000007d0 <__divsf3x>:
 7d0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_split3>
 7d4:	68 f3       	brcs	.-38     	; 0x7b0 <__divsf3+0x8>

000007d6 <__divsf3_pse>:
 7d6:	99 23       	and	r25, r25
 7d8:	b1 f3       	breq	.-20     	; 0x7c6 <__divsf3+0x1e>
 7da:	55 23       	and	r21, r21
 7dc:	91 f3       	breq	.-28     	; 0x7c2 <__divsf3+0x1a>
 7de:	95 1b       	sub	r25, r21
 7e0:	55 0b       	sbc	r21, r21
 7e2:	bb 27       	eor	r27, r27
 7e4:	aa 27       	eor	r26, r26
 7e6:	62 17       	cp	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	38 f0       	brcs	.+14     	; 0x7fc <__divsf3_pse+0x26>
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	44 1f       	adc	r20, r20
 7f8:	aa 1f       	adc	r26, r26
 7fa:	a9 f3       	breq	.-22     	; 0x7e6 <__divsf3_pse+0x10>
 7fc:	35 d0       	rcall	.+106    	; 0x868 <__divsf3_pse+0x92>
 7fe:	0e 2e       	mov	r0, r30
 800:	3a f0       	brmi	.+14     	; 0x810 <__divsf3_pse+0x3a>
 802:	e0 e8       	ldi	r30, 0x80	; 128
 804:	32 d0       	rcall	.+100    	; 0x86a <__divsf3_pse+0x94>
 806:	91 50       	subi	r25, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	e6 95       	lsr	r30
 80c:	00 1c       	adc	r0, r0
 80e:	ca f7       	brpl	.-14     	; 0x802 <__divsf3_pse+0x2c>
 810:	2b d0       	rcall	.+86     	; 0x868 <__divsf3_pse+0x92>
 812:	fe 2f       	mov	r31, r30
 814:	29 d0       	rcall	.+82     	; 0x868 <__divsf3_pse+0x92>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	bb 1f       	adc	r27, r27
 81e:	26 17       	cp	r18, r22
 820:	37 07       	cpc	r19, r23
 822:	48 07       	cpc	r20, r24
 824:	ab 07       	cpc	r26, r27
 826:	b0 e8       	ldi	r27, 0x80	; 128
 828:	09 f0       	breq	.+2      	; 0x82c <__divsf3_pse+0x56>
 82a:	bb 0b       	sbc	r27, r27
 82c:	80 2d       	mov	r24, r0
 82e:	bf 01       	movw	r22, r30
 830:	ff 27       	eor	r31, r31
 832:	93 58       	subi	r25, 0x83	; 131
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	3a f0       	brmi	.+14     	; 0x846 <__divsf3_pse+0x70>
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	51 05       	cpc	r21, r1
 83c:	78 f0       	brcs	.+30     	; 0x85c <__divsf3_pse+0x86>
 83e:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>
 842:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_szero>
 846:	5f 3f       	cpi	r21, 0xFF	; 255
 848:	e4 f3       	brlt	.-8      	; 0x842 <__divsf3_pse+0x6c>
 84a:	98 3e       	cpi	r25, 0xE8	; 232
 84c:	d4 f3       	brlt	.-12     	; 0x842 <__divsf3_pse+0x6c>
 84e:	86 95       	lsr	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	9f 5f       	subi	r25, 0xFF	; 255
 85a:	c9 f7       	brne	.-14     	; 0x84e <__divsf3_pse+0x78>
 85c:	88 0f       	add	r24, r24
 85e:	91 1d       	adc	r25, r1
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret
 868:	e1 e0       	ldi	r30, 0x01	; 1
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	bb 1f       	adc	r27, r27
 872:	62 17       	cp	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	ba 07       	cpc	r27, r26
 87a:	20 f0       	brcs	.+8      	; 0x884 <__divsf3_pse+0xae>
 87c:	62 1b       	sub	r22, r18
 87e:	73 0b       	sbc	r23, r19
 880:	84 0b       	sbc	r24, r20
 882:	ba 0b       	sbc	r27, r26
 884:	ee 1f       	adc	r30, r30
 886:	88 f7       	brcc	.-30     	; 0x86a <__divsf3_pse+0x94>
 888:	e0 95       	com	r30
 88a:	08 95       	ret

0000088c <__fixsfsi>:
 88c:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixunssfsi>
 890:	68 94       	set
 892:	b1 11       	cpse	r27, r1
 894:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_szero>
 898:	08 95       	ret

0000089a <__fixunssfsi>:
 89a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_splitA>
 89e:	88 f0       	brcs	.+34     	; 0x8c2 <__fixunssfsi+0x28>
 8a0:	9f 57       	subi	r25, 0x7F	; 127
 8a2:	98 f0       	brcs	.+38     	; 0x8ca <__fixunssfsi+0x30>
 8a4:	b9 2f       	mov	r27, r25
 8a6:	99 27       	eor	r25, r25
 8a8:	b7 51       	subi	r27, 0x17	; 23
 8aa:	b0 f0       	brcs	.+44     	; 0x8d8 <__fixunssfsi+0x3e>
 8ac:	e1 f0       	breq	.+56     	; 0x8e6 <__fixunssfsi+0x4c>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	1a f0       	brmi	.+6      	; 0x8be <__fixunssfsi+0x24>
 8b8:	ba 95       	dec	r27
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__fixunssfsi+0x14>
 8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <__fixunssfsi+0x4c>
 8be:	b1 30       	cpi	r27, 0x01	; 1
 8c0:	91 f0       	breq	.+36     	; 0x8e6 <__fixunssfsi+0x4c>
 8c2:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_zero>
 8c6:	b1 e0       	ldi	r27, 0x01	; 1
 8c8:	08 95       	ret
 8ca:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_zero>
 8ce:	67 2f       	mov	r22, r23
 8d0:	78 2f       	mov	r23, r24
 8d2:	88 27       	eor	r24, r24
 8d4:	b8 5f       	subi	r27, 0xF8	; 248
 8d6:	39 f0       	breq	.+14     	; 0x8e6 <__fixunssfsi+0x4c>
 8d8:	b9 3f       	cpi	r27, 0xF9	; 249
 8da:	cc f3       	brlt	.-14     	; 0x8ce <__fixunssfsi+0x34>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b3 95       	inc	r27
 8e4:	d9 f7       	brne	.-10     	; 0x8dc <__fixunssfsi+0x42>
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__fixunssfsi+0x5c>
 8e8:	90 95       	com	r25
 8ea:	80 95       	com	r24
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__floatunsisf>:
 8f8:	e8 94       	clt
 8fa:	09 c0       	rjmp	.+18     	; 0x90e <__stack+0xf>

000008fc <__floatsisf>:
 8fc:	97 fb       	bst	r25, 7
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__stack+0xf>
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	99 23       	and	r25, r25
 910:	a9 f0       	breq	.+42     	; 0x93c <__stack+0x3d>
 912:	f9 2f       	mov	r31, r25
 914:	96 e9       	ldi	r25, 0x96	; 150
 916:	bb 27       	eor	r27, r27
 918:	93 95       	inc	r25
 91a:	f6 95       	lsr	r31
 91c:	87 95       	ror	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f1 11       	cpse	r31, r1
 926:	f8 cf       	rjmp	.-16     	; 0x918 <__stack+0x19>
 928:	fa f4       	brpl	.+62     	; 0x968 <__stack+0x69>
 92a:	bb 0f       	add	r27, r27
 92c:	11 f4       	brne	.+4      	; 0x932 <__stack+0x33>
 92e:	60 ff       	sbrs	r22, 0
 930:	1b c0       	rjmp	.+54     	; 0x968 <__stack+0x69>
 932:	6f 5f       	subi	r22, 0xFF	; 255
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	16 c0       	rjmp	.+44     	; 0x968 <__stack+0x69>
 93c:	88 23       	and	r24, r24
 93e:	11 f0       	breq	.+4      	; 0x944 <__stack+0x45>
 940:	96 e9       	ldi	r25, 0x96	; 150
 942:	11 c0       	rjmp	.+34     	; 0x966 <__stack+0x67>
 944:	77 23       	and	r23, r23
 946:	21 f0       	breq	.+8      	; 0x950 <__stack+0x51>
 948:	9e e8       	ldi	r25, 0x8E	; 142
 94a:	87 2f       	mov	r24, r23
 94c:	76 2f       	mov	r23, r22
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0x5b>
 950:	66 23       	and	r22, r22
 952:	71 f0       	breq	.+28     	; 0x970 <__stack+0x71>
 954:	96 e8       	ldi	r25, 0x86	; 134
 956:	86 2f       	mov	r24, r22
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	2a f0       	brmi	.+10     	; 0x968 <__stack+0x69>
 95e:	9a 95       	dec	r25
 960:	66 0f       	add	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	da f7       	brpl	.-10     	; 0x95e <__stack+0x5f>
 968:	88 0f       	add	r24, r24
 96a:	96 95       	lsr	r25
 96c:	87 95       	ror	r24
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__fp_inf>:
 972:	97 f9       	bld	r25, 7
 974:	9f 67       	ori	r25, 0x7F	; 127
 976:	80 e8       	ldi	r24, 0x80	; 128
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	08 95       	ret

0000097e <__fp_nan>:
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	80 ec       	ldi	r24, 0xC0	; 192
 982:	08 95       	ret

00000984 <__fp_pscA>:
 984:	00 24       	eor	r0, r0
 986:	0a 94       	dec	r0
 988:	16 16       	cp	r1, r22
 98a:	17 06       	cpc	r1, r23
 98c:	18 06       	cpc	r1, r24
 98e:	09 06       	cpc	r0, r25
 990:	08 95       	ret

00000992 <__fp_pscB>:
 992:	00 24       	eor	r0, r0
 994:	0a 94       	dec	r0
 996:	12 16       	cp	r1, r18
 998:	13 06       	cpc	r1, r19
 99a:	14 06       	cpc	r1, r20
 99c:	05 06       	cpc	r0, r21
 99e:	08 95       	ret

000009a0 <__fp_round>:
 9a0:	09 2e       	mov	r0, r25
 9a2:	03 94       	inc	r0
 9a4:	00 0c       	add	r0, r0
 9a6:	11 f4       	brne	.+4      	; 0x9ac <__fp_round+0xc>
 9a8:	88 23       	and	r24, r24
 9aa:	52 f0       	brmi	.+20     	; 0x9c0 <__fp_round+0x20>
 9ac:	bb 0f       	add	r27, r27
 9ae:	40 f4       	brcc	.+16     	; 0x9c0 <__fp_round+0x20>
 9b0:	bf 2b       	or	r27, r31
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0x18>
 9b4:	60 ff       	sbrs	r22, 0
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__fp_round+0x20>
 9b8:	6f 5f       	subi	r22, 0xFF	; 255
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	08 95       	ret

000009c2 <__fp_split3>:
 9c2:	57 fd       	sbrc	r21, 7
 9c4:	90 58       	subi	r25, 0x80	; 128
 9c6:	44 0f       	add	r20, r20
 9c8:	55 1f       	adc	r21, r21
 9ca:	59 f0       	breq	.+22     	; 0x9e2 <__fp_splitA+0x10>
 9cc:	5f 3f       	cpi	r21, 0xFF	; 255
 9ce:	71 f0       	breq	.+28     	; 0x9ec <__fp_splitA+0x1a>
 9d0:	47 95       	ror	r20

000009d2 <__fp_splitA>:
 9d2:	88 0f       	add	r24, r24
 9d4:	97 fb       	bst	r25, 7
 9d6:	99 1f       	adc	r25, r25
 9d8:	61 f0       	breq	.+24     	; 0x9f2 <__fp_splitA+0x20>
 9da:	9f 3f       	cpi	r25, 0xFF	; 255
 9dc:	79 f0       	breq	.+30     	; 0x9fc <__fp_splitA+0x2a>
 9de:	87 95       	ror	r24
 9e0:	08 95       	ret
 9e2:	12 16       	cp	r1, r18
 9e4:	13 06       	cpc	r1, r19
 9e6:	14 06       	cpc	r1, r20
 9e8:	55 1f       	adc	r21, r21
 9ea:	f2 cf       	rjmp	.-28     	; 0x9d0 <__fp_split3+0xe>
 9ec:	46 95       	lsr	r20
 9ee:	f1 df       	rcall	.-30     	; 0x9d2 <__fp_splitA>
 9f0:	08 c0       	rjmp	.+16     	; 0xa02 <__fp_splitA+0x30>
 9f2:	16 16       	cp	r1, r22
 9f4:	17 06       	cpc	r1, r23
 9f6:	18 06       	cpc	r1, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	f1 cf       	rjmp	.-30     	; 0x9de <__fp_splitA+0xc>
 9fc:	86 95       	lsr	r24
 9fe:	71 05       	cpc	r23, r1
 a00:	61 05       	cpc	r22, r1
 a02:	08 94       	sec
 a04:	08 95       	ret

00000a06 <__fp_zero>:
 a06:	e8 94       	clt

00000a08 <__fp_szero>:
 a08:	bb 27       	eor	r27, r27
 a0a:	66 27       	eor	r22, r22
 a0c:	77 27       	eor	r23, r23
 a0e:	cb 01       	movw	r24, r22
 a10:	97 f9       	bld	r25, 7
 a12:	08 95       	ret
 a14:	16 f0       	brts	.+4      	; 0xa1a <__fp_szero+0x12>
 a16:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_mpack>
 a1a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_nan>
 a1e:	68 94       	set
 a20:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>

00000a24 <log>:
 a24:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_splitA>
 a28:	a8 f3       	brcs	.-22     	; 0xa14 <__fp_szero+0xc>
 a2a:	99 23       	and	r25, r25
 a2c:	c1 f3       	breq	.-16     	; 0xa1e <__fp_szero+0x16>
 a2e:	ae f3       	brts	.-22     	; 0xa1a <__fp_szero+0x12>
 a30:	df 93       	push	r29
 a32:	cf 93       	push	r28
 a34:	1f 93       	push	r17
 a36:	0f 93       	push	r16
 a38:	ff 92       	push	r15
 a3a:	c9 2f       	mov	r28, r25
 a3c:	dd 27       	eor	r29, r29
 a3e:	88 23       	and	r24, r24
 a40:	2a f0       	brmi	.+10     	; 0xa4c <log+0x28>
 a42:	21 97       	sbiw	r28, 0x01	; 1
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	da f7       	brpl	.-10     	; 0xa42 <log+0x1e>
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	40 e8       	ldi	r20, 0x80	; 128
 a52:	5f eb       	ldi	r21, 0xBF	; 191
 a54:	9f e3       	ldi	r25, 0x3F	; 63
 a56:	88 39       	cpi	r24, 0x98	; 152
 a58:	20 f0       	brcs	.+8      	; 0xa62 <log+0x3e>
 a5a:	80 3e       	cpi	r24, 0xE0	; 224
 a5c:	38 f0       	brcs	.+14     	; 0xa6c <log+0x48>
 a5e:	21 96       	adiw	r28, 0x01	; 1
 a60:	8f 77       	andi	r24, 0x7F	; 127
 a62:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3>
 a66:	e4 eb       	ldi	r30, 0xB4	; 180
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <log+0x50>
 a6c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__addsf3>
 a70:	e1 ee       	ldi	r30, 0xE1	; 225
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_powser>
 a78:	8b 01       	movw	r16, r22
 a7a:	be 01       	movw	r22, r28
 a7c:	ec 01       	movw	r28, r24
 a7e:	fb 2e       	mov	r15, r27
 a80:	6f 57       	subi	r22, 0x7F	; 127
 a82:	71 09       	sbc	r23, r1
 a84:	75 95       	asr	r23
 a86:	77 1f       	adc	r23, r23
 a88:	88 0b       	sbc	r24, r24
 a8a:	99 0b       	sbc	r25, r25
 a8c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatsisf>
 a90:	28 e1       	ldi	r18, 0x18	; 24
 a92:	32 e7       	ldi	r19, 0x72	; 114
 a94:	41 e3       	ldi	r20, 0x31	; 49
 a96:	5f e3       	ldi	r21, 0x3F	; 63
 a98:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3x>
 a9c:	af 2d       	mov	r26, r15
 a9e:	98 01       	movw	r18, r16
 aa0:	ae 01       	movw	r20, r28
 aa2:	ff 90       	pop	r15
 aa4:	0f 91       	pop	r16
 aa6:	1f 91       	pop	r17
 aa8:	cf 91       	pop	r28
 aaa:	df 91       	pop	r29
 aac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__addsf3x>
 ab0:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_round>

00000ab4 <__mulsf3>:
 ab4:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3x>
 ab8:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_round>
 abc:	0e 94 c2 04 	call	0x984	; 0x984 <__fp_pscA>
 ac0:	38 f0       	brcs	.+14     	; 0xad0 <__mulsf3+0x1c>
 ac2:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_pscB>
 ac6:	20 f0       	brcs	.+8      	; 0xad0 <__mulsf3+0x1c>
 ac8:	95 23       	and	r25, r21
 aca:	11 f0       	breq	.+4      	; 0xad0 <__mulsf3+0x1c>
 acc:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>
 ad0:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_nan>
 ad4:	11 24       	eor	r1, r1
 ad6:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_szero>

00000ada <__mulsf3x>:
 ada:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_split3>
 ade:	70 f3       	brcs	.-36     	; 0xabc <__mulsf3+0x8>

00000ae0 <__mulsf3_pse>:
 ae0:	95 9f       	mul	r25, r21
 ae2:	c1 f3       	breq	.-16     	; 0xad4 <__mulsf3+0x20>
 ae4:	95 0f       	add	r25, r21
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	55 1f       	adc	r21, r21
 aea:	62 9f       	mul	r22, r18
 aec:	f0 01       	movw	r30, r0
 aee:	72 9f       	mul	r23, r18
 af0:	bb 27       	eor	r27, r27
 af2:	f0 0d       	add	r31, r0
 af4:	b1 1d       	adc	r27, r1
 af6:	63 9f       	mul	r22, r19
 af8:	aa 27       	eor	r26, r26
 afa:	f0 0d       	add	r31, r0
 afc:	b1 1d       	adc	r27, r1
 afe:	aa 1f       	adc	r26, r26
 b00:	64 9f       	mul	r22, r20
 b02:	66 27       	eor	r22, r22
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	66 1f       	adc	r22, r22
 b0a:	82 9f       	mul	r24, r18
 b0c:	22 27       	eor	r18, r18
 b0e:	b0 0d       	add	r27, r0
 b10:	a1 1d       	adc	r26, r1
 b12:	62 1f       	adc	r22, r18
 b14:	73 9f       	mul	r23, r19
 b16:	b0 0d       	add	r27, r0
 b18:	a1 1d       	adc	r26, r1
 b1a:	62 1f       	adc	r22, r18
 b1c:	83 9f       	mul	r24, r19
 b1e:	a0 0d       	add	r26, r0
 b20:	61 1d       	adc	r22, r1
 b22:	22 1f       	adc	r18, r18
 b24:	74 9f       	mul	r23, r20
 b26:	33 27       	eor	r19, r19
 b28:	a0 0d       	add	r26, r0
 b2a:	61 1d       	adc	r22, r1
 b2c:	23 1f       	adc	r18, r19
 b2e:	84 9f       	mul	r24, r20
 b30:	60 0d       	add	r22, r0
 b32:	21 1d       	adc	r18, r1
 b34:	82 2f       	mov	r24, r18
 b36:	76 2f       	mov	r23, r22
 b38:	6a 2f       	mov	r22, r26
 b3a:	11 24       	eor	r1, r1
 b3c:	9f 57       	subi	r25, 0x7F	; 127
 b3e:	50 40       	sbci	r21, 0x00	; 0
 b40:	9a f0       	brmi	.+38     	; 0xb68 <__mulsf3_pse+0x88>
 b42:	f1 f0       	breq	.+60     	; 0xb80 <__mulsf3_pse+0xa0>
 b44:	88 23       	and	r24, r24
 b46:	4a f0       	brmi	.+18     	; 0xb5a <__mulsf3_pse+0x7a>
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	bb 1f       	adc	r27, r27
 b4e:	66 1f       	adc	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	91 50       	subi	r25, 0x01	; 1
 b56:	50 40       	sbci	r21, 0x00	; 0
 b58:	a9 f7       	brne	.-22     	; 0xb44 <__mulsf3_pse+0x64>
 b5a:	9e 3f       	cpi	r25, 0xFE	; 254
 b5c:	51 05       	cpc	r21, r1
 b5e:	80 f0       	brcs	.+32     	; 0xb80 <__mulsf3_pse+0xa0>
 b60:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_inf>
 b64:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_szero>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	e4 f3       	brlt	.-8      	; 0xb64 <__mulsf3_pse+0x84>
 b6c:	98 3e       	cpi	r25, 0xE8	; 232
 b6e:	d4 f3       	brlt	.-12     	; 0xb64 <__mulsf3_pse+0x84>
 b70:	86 95       	lsr	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	e7 95       	ror	r30
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	c1 f7       	brne	.-16     	; 0xb70 <__mulsf3_pse+0x90>
 b80:	fe 2b       	or	r31, r30
 b82:	88 0f       	add	r24, r24
 b84:	91 1d       	adc	r25, r1
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__fp_mpack>:
 b8e:	9f 3f       	cpi	r25, 0xFF	; 255
 b90:	31 f0       	breq	.+12     	; 0xb9e <__fp_mpack_finite+0xc>

00000b92 <__fp_mpack_finite>:
 b92:	91 50       	subi	r25, 0x01	; 1
 b94:	20 f4       	brcc	.+8      	; 0xb9e <__fp_mpack_finite+0xc>
 b96:	87 95       	ror	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	88 0f       	add	r24, r24
 ba0:	91 1d       	adc	r25, r1
 ba2:	96 95       	lsr	r25
 ba4:	87 95       	ror	r24
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__fp_powser>:
 baa:	df 93       	push	r29
 bac:	cf 93       	push	r28
 bae:	1f 93       	push	r17
 bb0:	0f 93       	push	r16
 bb2:	ff 92       	push	r15
 bb4:	ef 92       	push	r14
 bb6:	df 92       	push	r13
 bb8:	7b 01       	movw	r14, r22
 bba:	8c 01       	movw	r16, r24
 bbc:	68 94       	set
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__fp_powser+0x22>
 bc0:	da 2e       	mov	r13, r26
 bc2:	ef 01       	movw	r28, r30
 bc4:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3x>
 bc8:	fe 01       	movw	r30, r28
 bca:	e8 94       	clt
 bcc:	a5 91       	lpm	r26, Z+
 bce:	25 91       	lpm	r18, Z+
 bd0:	35 91       	lpm	r19, Z+
 bd2:	45 91       	lpm	r20, Z+
 bd4:	55 91       	lpm	r21, Z+
 bd6:	a6 f3       	brts	.-24     	; 0xbc0 <__fp_powser+0x16>
 bd8:	ef 01       	movw	r28, r30
 bda:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__addsf3x>
 bde:	fe 01       	movw	r30, r28
 be0:	97 01       	movw	r18, r14
 be2:	a8 01       	movw	r20, r16
 be4:	da 94       	dec	r13
 be6:	69 f7       	brne	.-38     	; 0xbc2 <__fp_powser+0x18>
 be8:	df 90       	pop	r13
 bea:	ef 90       	pop	r14
 bec:	ff 90       	pop	r15
 bee:	0f 91       	pop	r16
 bf0:	1f 91       	pop	r17
 bf2:	cf 91       	pop	r28
 bf4:	df 91       	pop	r29
 bf6:	08 95       	ret

00000bf8 <__mulshisi3>:
 bf8:	b7 ff       	sbrs	r27, 7
 bfa:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__muluhisi3>

00000bfe <__mulohisi3>:
 bfe:	0e 94 04 06 	call	0xc08	; 0xc08 <__muluhisi3>
 c02:	82 1b       	sub	r24, r18
 c04:	93 0b       	sbc	r25, r19
 c06:	08 95       	ret

00000c08 <__muluhisi3>:
 c08:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__umulhisi3>
 c0c:	a5 9f       	mul	r26, r21
 c0e:	90 0d       	add	r25, r0
 c10:	b4 9f       	mul	r27, r20
 c12:	90 0d       	add	r25, r0
 c14:	a4 9f       	mul	r26, r20
 c16:	80 0d       	add	r24, r0
 c18:	91 1d       	adc	r25, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	08 95       	ret

00000c1e <__umulhisi3>:
 c1e:	a2 9f       	mul	r26, r18
 c20:	b0 01       	movw	r22, r0
 c22:	b3 9f       	mul	r27, r19
 c24:	c0 01       	movw	r24, r0
 c26:	a3 9f       	mul	r26, r19
 c28:	70 0d       	add	r23, r0
 c2a:	81 1d       	adc	r24, r1
 c2c:	11 24       	eor	r1, r1
 c2e:	91 1d       	adc	r25, r1
 c30:	b2 9f       	mul	r27, r18
 c32:	70 0d       	add	r23, r0
 c34:	81 1d       	adc	r24, r1
 c36:	11 24       	eor	r1, r1
 c38:	91 1d       	adc	r25, r1
 c3a:	08 95       	ret

00000c3c <__itoa_ncheck>:
 c3c:	bb 27       	eor	r27, r27
 c3e:	4a 30       	cpi	r20, 0x0A	; 10
 c40:	31 f4       	brne	.+12     	; 0xc4e <__itoa_ncheck+0x12>
 c42:	99 23       	and	r25, r25
 c44:	22 f4       	brpl	.+8      	; 0xc4e <__itoa_ncheck+0x12>
 c46:	bd e2       	ldi	r27, 0x2D	; 45
 c48:	90 95       	com	r25
 c4a:	81 95       	neg	r24
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__utoa_common>

00000c52 <__ultoa_ncheck>:
 c52:	bb 27       	eor	r27, r27

00000c54 <__ultoa_common>:
 c54:	fa 01       	movw	r30, r20
 c56:	a6 2f       	mov	r26, r22
 c58:	62 17       	cp	r22, r18
 c5a:	71 05       	cpc	r23, r1
 c5c:	81 05       	cpc	r24, r1
 c5e:	91 05       	cpc	r25, r1
 c60:	33 0b       	sbc	r19, r19
 c62:	30 fb       	bst	r19, 0
 c64:	66 f0       	brts	.+24     	; 0xc7e <__ultoa_common+0x2a>
 c66:	aa 27       	eor	r26, r26
 c68:	66 0f       	add	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	aa 1f       	adc	r26, r26
 c72:	a2 17       	cp	r26, r18
 c74:	10 f0       	brcs	.+4      	; 0xc7a <__ultoa_common+0x26>
 c76:	a2 1b       	sub	r26, r18
 c78:	63 95       	inc	r22
 c7a:	38 50       	subi	r19, 0x08	; 8
 c7c:	a9 f7       	brne	.-22     	; 0xc68 <__ultoa_common+0x14>
 c7e:	a0 5d       	subi	r26, 0xD0	; 208
 c80:	aa 33       	cpi	r26, 0x3A	; 58
 c82:	08 f0       	brcs	.+2      	; 0xc86 <__ultoa_common+0x32>
 c84:	a9 5d       	subi	r26, 0xD9	; 217
 c86:	a1 93       	st	Z+, r26
 c88:	36 f7       	brtc	.-52     	; 0xc56 <__ultoa_common+0x2>
 c8a:	b1 11       	cpse	r27, r1
 c8c:	b1 93       	st	Z+, r27
 c8e:	10 82       	st	Z, r1
 c90:	ca 01       	movw	r24, r20
 c92:	0c 94 65 06 	jmp	0xcca	; 0xcca <strrev>

00000c96 <__utoa_ncheck>:
 c96:	bb 27       	eor	r27, r27

00000c98 <__utoa_common>:
 c98:	fb 01       	movw	r30, r22
 c9a:	55 27       	eor	r21, r21
 c9c:	aa 27       	eor	r26, r26
 c9e:	88 0f       	add	r24, r24
 ca0:	99 1f       	adc	r25, r25
 ca2:	aa 1f       	adc	r26, r26
 ca4:	a4 17       	cp	r26, r20
 ca6:	10 f0       	brcs	.+4      	; 0xcac <__utoa_common+0x14>
 ca8:	a4 1b       	sub	r26, r20
 caa:	83 95       	inc	r24
 cac:	50 51       	subi	r21, 0x10	; 16
 cae:	b9 f7       	brne	.-18     	; 0xc9e <__utoa_common+0x6>
 cb0:	a0 5d       	subi	r26, 0xD0	; 208
 cb2:	aa 33       	cpi	r26, 0x3A	; 58
 cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__utoa_common+0x20>
 cb6:	a9 5d       	subi	r26, 0xD9	; 217
 cb8:	a1 93       	st	Z+, r26
 cba:	00 97       	sbiw	r24, 0x00	; 0
 cbc:	79 f7       	brne	.-34     	; 0xc9c <__utoa_common+0x4>
 cbe:	b1 11       	cpse	r27, r1
 cc0:	b1 93       	st	Z+, r27
 cc2:	11 92       	st	Z+, r1
 cc4:	cb 01       	movw	r24, r22
 cc6:	0c 94 65 06 	jmp	0xcca	; 0xcca <strrev>

00000cca <strrev>:
 cca:	dc 01       	movw	r26, r24
 ccc:	fc 01       	movw	r30, r24
 cce:	67 2f       	mov	r22, r23
 cd0:	71 91       	ld	r23, Z+
 cd2:	77 23       	and	r23, r23
 cd4:	e1 f7       	brne	.-8      	; 0xcce <strrev+0x4>
 cd6:	32 97       	sbiw	r30, 0x02	; 2
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <strrev+0x18>
 cda:	7c 91       	ld	r23, X
 cdc:	6d 93       	st	X+, r22
 cde:	70 83       	st	Z, r23
 ce0:	62 91       	ld	r22, -Z
 ce2:	ae 17       	cp	r26, r30
 ce4:	bf 07       	cpc	r27, r31
 ce6:	c8 f3       	brcs	.-14     	; 0xcda <strrev+0x10>
 ce8:	08 95       	ret

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
